{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\src\\\\components\\\\Timer\\\\TimerFunctionality.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport TimerView from \"./TimerView\";\nimport Buttons from \"./Buttons\";\nimport Swal from \"sweetalert2\";\nimport { setTimer } from '../../redux/slices/timer';\nimport { useDispatch } from 'react-redux';\nimport \"../../App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction TimerFunctionality() {\n  _s();\n\n  const [subCycleCount, setSubCycleCount] = useState(0);\n  const [cycleCount, setCycleCount] = useState(0);\n  const dispatch = useDispatch();\n  const [actualMinutes, setActualMinutes] = useState(0);\n  const [actualSeconds, setActualSeconds] = useState(0);\n  const [interv, setInterv] = useState();\n  const [status, setStatus] = useState(0);\n  const [msg, setMsg] = useState(\"Set the timers to start\"); //En estas variables guardamos los valores que ingresa el usuario y no son modificadas durante la ejecucion.\n\n  const [userStudyTime, setUserStudyTime] = useState();\n  const [userShortBreak, setUserShortBreak] = useState();\n  const [userLongBreak, setUserLongBreak] = useState(); //Variables para incrementar los ciclos y luego guardarlas en el estado generales.\n\n  let updateSubCycleCount = subCycleCount;\n  let updateCycleCount = cycleCount; //Variables que se decrementan como temporizadores, sirven para no modificar las introducidas por el usuario.\n\n  let updateMinutes = actualMinutes;\n  let updateSeconds = actualSeconds; // Inicio configurando el Timer y guardando los valores iniciales que ingresa el usuario.\n\n  const configTimes = () => {\n    Swal.fire({\n      title: \"Timer Configuration\",\n      html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n     <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n     <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n      confirmButtonText: \"Confirm\",\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      focusConfirm: false,\n      preConfirm: () => {\n        const configStudyTime = Swal.getPopup().querySelector(\"#study-time\").value;\n        const configShortBreak = Swal.getPopup().querySelector(\"#short-break\").value;\n        const configLongBreak = Swal.getPopup().querySelector(\"#long-break\").value;\n\n        if (!configStudyTime || !configShortBreak || !configLongBreak) {\n          Swal.showValidationMessage(`Please configure the timer`);\n        }\n\n        return {\n          configStudyTime: configStudyTime,\n          configShortBreak: configShortBreak,\n          configLongBreak: configLongBreak\n        };\n      }\n    }).then(result => {\n      Swal.fire({\n        confirmButtonText: \"Ok\",\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        focusConfirm: false,\n        title: `Study Time: ${result.value.configStudyTime} minutes\n          Short Break Time: ${result.value.configShortBreak} minutes\n          Long Break Time: ${result.value.configLongBreak} minutes`.trim()\n      });\n      setSubCycleCount(0);\n      setMsg(\"Study Time\");\n      setStatus(1);\n\n      if (status === 4) {\n        backToStart();\n      }\n\n      const times = {\n        study: result.value.configStudyTime,\n        shortBreak: result.value.configShortBreak,\n        longBreak: result.value.configLongBreak\n      };\n      console.log(times);\n      dispatch(setTimer({\n        values: {\n          times,\n          status\n        }\n      })); //setUserStudyTime(result.value.configStudyTime);\n      //setActualMinutes(result.value.configStudyTime);\n      //setUserShortBreak(result.value.configShortBreak);\n      //setUserLongBreak(result.value.configLongBreak);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"timerFunctionality\",\n    children: [/*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"msg-text\",\n      children: msg\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TimerView, {\n      status: status,\n      subCycleCount: subCycleCount,\n      cycleCount: cycleCount,\n      actualMinutes: actualMinutes,\n      actualSeconds: actualSeconds\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 102,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Buttons, {\n      status: status,\n      subCycleCount: subCycleCount,\n      studyStart: studyStart,\n      configTimes: configTimes,\n      shortBreakStart: shortBreakStart,\n      longBreakStart: longBreakStart,\n      backToStart: backToStart,\n      stop: stop,\n      resume: resume,\n      skip: skip\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TimerFunctionality, \"N21Z7goVgS6qxzO01CHa01X5y8Y=\", false, function () {\n  return [useDispatch];\n});\n\n_c = TimerFunctionality;\nexport default TimerFunctionality;\n\nvar _c;\n\n$RefreshReg$(_c, \"TimerFunctionality\");","map":{"version":3,"names":["React","useState","TimerView","Buttons","Swal","setTimer","useDispatch","TimerFunctionality","subCycleCount","setSubCycleCount","cycleCount","setCycleCount","dispatch","actualMinutes","setActualMinutes","actualSeconds","setActualSeconds","interv","setInterv","status","setStatus","msg","setMsg","userStudyTime","setUserStudyTime","userShortBreak","setUserShortBreak","userLongBreak","setUserLongBreak","updateSubCycleCount","updateCycleCount","updateMinutes","updateSeconds","configTimes","fire","title","html","confirmButtonText","allowOutsideClick","allowEscapeKey","focusConfirm","preConfirm","configStudyTime","getPopup","querySelector","value","configShortBreak","configLongBreak","showValidationMessage","then","result","trim","backToStart","times","study","shortBreak","longBreak","console","log","values","studyStart","shortBreakStart","longBreakStart","stop","resume","skip"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/TimerFunctionality.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport TimerView from \"./TimerView\";\r\nimport Buttons from \"./Buttons\";\r\nimport Swal from \"sweetalert2\";\r\nimport {setTimer} from '../../redux/slices/timer'\r\nimport {useDispatch} from 'react-redux'\r\nimport \"../../App.css\";\r\n\r\nfunction TimerFunctionality() {\r\n  const [subCycleCount, setSubCycleCount] = useState(0);\r\n  const [cycleCount, setCycleCount] = useState(0);\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const [actualMinutes, setActualMinutes] = useState(0);\r\n  const [actualSeconds, setActualSeconds] = useState(0);\r\n\r\n  const [interv, setInterv] = useState();\r\n  const [status, setStatus] = useState(0);\r\n\r\n  const [msg, setMsg] = useState(\"Set the timers to start\");\r\n\r\n  //En estas variables guardamos los valores que ingresa el usuario y no son modificadas durante la ejecucion.\r\n\r\n  const [userStudyTime, setUserStudyTime] = useState();\r\n  const [userShortBreak, setUserShortBreak] = useState();\r\n  const [userLongBreak, setUserLongBreak] = useState();\r\n\r\n  //Variables para incrementar los ciclos y luego guardarlas en el estado generales.\r\n\r\n  let updateSubCycleCount = subCycleCount;\r\n  let updateCycleCount = cycleCount;\r\n\r\n  //Variables que se decrementan como temporizadores, sirven para no modificar las introducidas por el usuario.\r\n\r\n  let updateMinutes = actualMinutes;\r\n  let updateSeconds = actualSeconds;\r\n\r\n  // Inicio configurando el Timer y guardando los valores iniciales que ingresa el usuario.\r\n\r\n  const configTimes = () => {\r\n    Swal.fire({\r\n      title: \"Timer Configuration\",\r\n      html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n     <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n     <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n      confirmButtonText: \"Confirm\",\r\n      allowOutsideClick: false,\r\n      allowEscapeKey: false,\r\n      focusConfirm: false,\r\n      preConfirm: () => {\r\n        const configStudyTime =\r\n          Swal.getPopup().querySelector(\"#study-time\").value;\r\n        const configShortBreak =\r\n          Swal.getPopup().querySelector(\"#short-break\").value;\r\n        const configLongBreak =\r\n          Swal.getPopup().querySelector(\"#long-break\").value;\r\n        if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n          Swal.showValidationMessage(`Please configure the timer`);\r\n        }\r\n        return {\r\n          configStudyTime: configStudyTime,\r\n          configShortBreak: configShortBreak,\r\n          configLongBreak: configLongBreak,\r\n        };\r\n      },\r\n    }).then((result) => {\r\n      Swal.fire({\r\n        confirmButtonText: \"Ok\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n        focusConfirm: false,\r\n        title: `Study Time: ${result.value.configStudyTime} minutes\r\n          Short Break Time: ${result.value.configShortBreak} minutes\r\n          Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n      });\r\n      setSubCycleCount(0);\r\n      setMsg(\"Study Time\");\r\n      setStatus(1);\r\n      if (status === 4) {\r\n        backToStart();\r\n      }\r\n      const times = {study: result.value.configStudyTime,\r\n        shortBreak: result.value.configShortBreak,\r\n        longBreak: result.value.configLongBreak};\r\n\r\n      console.log(times);\r\n\r\n      dispatch(setTimer({values: {times,status}}));\r\n      //setUserStudyTime(result.value.configStudyTime);\r\n      //setActualMinutes(result.value.configStudyTime);\r\n      //setUserShortBreak(result.value.configShortBreak);\r\n      //setUserLongBreak(result.value.configLongBreak);\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"timerFunctionality\">\r\n      <span className=\"msg-text\">{msg}</span>\r\n\r\n      <TimerView\r\n        status={status}\r\n        subCycleCount={subCycleCount}\r\n        cycleCount={cycleCount}\r\n        actualMinutes={actualMinutes}\r\n        actualSeconds={actualSeconds}\r\n      />\r\n\r\n      <Buttons\r\n        status={status}\r\n        subCycleCount={subCycleCount}\r\n        studyStart={studyStart}\r\n        configTimes={configTimes}\r\n        shortBreakStart={shortBreakStart}\r\n        longBreakStart={longBreakStart}\r\n        backToStart={backToStart}\r\n        stop={stop}\r\n        resume={resume}\r\n        skip={skip}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TimerFunctionality;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}