{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\src\\\\components\\\\Timer\\\\TimerFunctionality.js\";\nimport React, { useState } from 'react';\nimport TimerView from './TimerView'; //import TimerView from './TimerView'\n\nimport Buttons from './Buttons'; //import Message from './Message'\n\nimport Swal from 'sweetalert2';\n\nfunction TimerFunctionality() {\n  var initialMinutes = 0;\n  var initialSeconds = 0;\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      subCycleCount = _useState2[0],\n      setSubCycleCount = _useState2[1];\n\n  var _useState3 = useState(initialMinutes),\n      _useState4 = _slicedToArray(_useState3, 2),\n      studyMinutes = _useState4[0],\n      setStudyMinutes = _useState4[1];\n\n  var _useState5 = useState(initialSeconds),\n      _useState6 = _slicedToArray(_useState5, 2),\n      studySeconds = _useState6[0],\n      setStudySeconds = _useState6[1];\n\n  var _useState7 = useState(initialMinutes),\n      _useState8 = _slicedToArray(_useState7, 2),\n      shortBreakMinutes = _useState8[0],\n      setShortBreakMinutes = _useState8[1];\n\n  var _useState9 = useState(initialSeconds),\n      _useState10 = _slicedToArray(_useState9, 2),\n      shortBreakSeconds = _useState10[0],\n      setShortBreakSeconds = _useState10[1];\n\n  var _useState11 = useState(initialMinutes),\n      _useState12 = _slicedToArray(_useState11, 2),\n      longBreakMinutes = _useState12[0],\n      setLongBreakMinutes = _useState12[1];\n\n  var _useState13 = useState(initialSeconds),\n      _useState14 = _slicedToArray(_useState13, 2),\n      longBreakSeconds = _useState14[0],\n      setLongBreakSeconds = _useState14[1];\n\n  var _useState15 = useState(),\n      _useState16 = _slicedToArray(_useState15, 2),\n      interv = _useState16[0],\n      setInterv = _useState16[1];\n\n  var _useState17 = useState(0),\n      _useState18 = _slicedToArray(_useState17, 2),\n      status = _useState18[0],\n      setStatus = _useState18[1];\n\n  var _useState19 = useState(),\n      _useState20 = _slicedToArray(_useState19, 2),\n      userStudyTime = _useState20[0],\n      setUserStudyTime = _useState20[1];\n\n  var _useState21 = useState(),\n      _useState22 = _slicedToArray(_useState21, 2),\n      userShortBreak = _useState22[0],\n      setUserShortBreak = _useState22[1];\n\n  var _useState23 = useState(),\n      _useState24 = _slicedToArray(_useState23, 2),\n      userLongBreak = _useState24[0],\n      setUserLongBreak = _useState24[1];\n\n  var studyStart = function studyStart() {\n    if (studyMinutes === 0 && studySeconds === 0) {\n      alert(\"Setear tiempo de estudio\");\n    } else {\n      studyRun();\n      setInterv(setInterval(studyRun, 1));\n    }\n  };\n\n  var updateStudyMin = studyMinutes;\n  var updateStudySecs = studySeconds;\n\n  var studyRun = function studyRun() {\n    if (updateStudySecs === 0) {\n      if (updateStudyMin != 0) {\n        updateStudyMin--;\n        updateStudySecs = 59;\n      } else {\n        if (updateStudySecs === 0) {\n          setShortBreakMinutes(userShortBreak);\n          setStatus(2);\n          clearInterval(interv);\n        }\n      }\n    } else {\n      updateStudySecs--;\n    }\n\n    setStudyMinutes(updateStudyMin);\n    setStudySeconds(updateStudySecs);\n  };\n\n  var updateSubCycleCount = subCycleCount;\n\n  var shortBreakStart = function shortBreakStart() {\n    shortBreakRun();\n    setInterv(setInterval(shortBreakRun, 1));\n    updateSubCycleCount += 1;\n    setSubCycleCount(updateSubCycleCount);\n  };\n\n  var updateShortBreakMin = shortBreakMinutes;\n  var updateShortBreakSecs = shortBreakSeconds;\n\n  var shortBreakRun = function shortBreakRun() {\n    if (updateShortBreakSecs === 0) {\n      if (updateShortBreakMin != 0) {\n        updateShortBreakMin--;\n        updateShortBreakSecs = 59;\n      } else {\n        if (subCycleCount === 4) {\n          setSubCycleCount(0);\n          setStatus(3);\n          clearInterval(interv);\n        } else {\n          setStudyMinutes(userStudyTime);\n          setStatus(1);\n          clearInterval(interv);\n        }\n      }\n    } else {\n      updateShortBreakSecs--;\n    }\n\n    setShortBreakMinutes(updateShortBreakMin);\n    setShortBreakSeconds(updateShortBreakSecs);\n  };\n\n  var longBreakStart = function longBreakStart() {\n    longBreakRun();\n    setInterv(setInterval(longBreakRun, 0.5));\n  };\n\n  var updateLongBreakSecs = longBreakSeconds;\n  var updateLongBreakMin = longBreakMinutes;\n\n  var longBreakRun = function longBreakRun() {\n    if (updateLongBreakSecs === 0) {\n      if (updateLongBreakMin != 0) {\n        updateLongBreakMin--;\n        updateLongBreakSecs = 59;\n      } else {\n        setStatus(3);\n        clearInterval(interv);\n      }\n    } else {\n      updateLongBreakSecs--;\n    }\n\n    setLongBreakMinutes(updateLongBreakMin);\n    setLongBreakSeconds(updateLongBreakSecs);\n  };\n\n  var configTimes = function configTimes() {\n    var number = prompt('Ingrese minutos de estudio');\n\n    if (Number(number)) {\n      setStudyMinutes(number);\n      setUserStudyTime(number);\n    } else {\n      alert('invalid');\n    }\n\n    var number1 = prompt('Ingrese minutos de short break');\n\n    if (Number(number1)) {\n      setShortBreakMinutes(number1);\n      setUserShortBreak(number1);\n    } else {\n      alert('invalid');\n    }\n\n    var number3 = prompt('Ingrese minutos de long break');\n\n    if (Number(number3)) {\n      setLongBreakMinutes(number3);\n      setUserLongBreak(number3);\n    } else {\n      alert('invalid');\n    }\n\n    setStatus(1);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(TimerView, {\n    studyMinutes: studyMinutes,\n    studySeconds: studySeconds,\n    status: status,\n    shortBreakMinutes: shortBreakMinutes,\n    shortBreakSeconds: shortBreakSeconds,\n    longBreakMinutes: longBreakMinutes,\n    longBreakSeconds: longBreakSeconds,\n    subCycleCount: subCycleCount,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Buttons, {\n    status: status,\n    studyStart: studyStart,\n    configTimes: configTimes,\n    studyMinutes: studyMinutes,\n    shortBreakStart: shortBreakStart,\n    longBreakStart: longBreakStart,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }\n  }));\n}\n\nexport default TimerFunctionality;\n/*\r\n    const initialMinutes = 0;\r\n    const initialSeconds = 0;\r\n    const breakMinutes = 0;\r\n    const breakSeconds = 0;\r\n    let breakMsg = 'Break Time';\r\n    let studyMsg = 'Study Time';\r\n    let configMsg = 'Study Timer Configuration'\r\n    let configBreakMsg = 'Break Timer Configuration'\r\n    let welcomeMsg = 'Pomodoro Study Sesion'\r\n  \r\n    const [minutes, setMinutes] = useState(initialMinutes);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n    const [breakMin, setBreakMinutes] = useState(breakMinutes);\r\n    const [breakSec, setBreakSeconds] = useState(breakSeconds);\r\n    const [msg, setMsg] = useState(welcomeMsg);\r\n    const [interv, setInterv] = useState();\r\n    const [status, setStatus] = useState(0);\r\n\r\n    \r\n    --------------------- EXPLICACIÓN DE ESTADOS (STATUS), LO QUE SE MUESTRA Y FUNCIONALIDADES --------------------- \r\n    Están de forma desordenada dado que a medida que avanzaba en el programa tuve que ir agregando\r\n    funcionalidades dependiendo las vistas y las acciones que se tomen.\r\n\r\n      NOT STARTED = 0\r\n          Muestra solo el botón de Configuraciónes y el Start.\r\n      STARTED = 1\r\n          Muestra el STOP, RESET y Go to Break, acá para ir al Break es necesario\r\n          pausar el timer (STOP) para que no se corrompa el Timer. Esto lanza una alerta\r\n          si se intenta ir al Break sin haberlo pausado.\r\n      STOPPED = 2\r\n          Cuando se pulsa STOP y se pausa el Timer, se pasa a este estado 2 donde se muestran\r\n          los botones de RESUME, RESET y Go to Break como el anterior, pero ahora si permite\r\n          cambiar a Break Time.\r\n\r\n      BREAK = 3 (ELIMINADO)\r\n          Si pulsamos Go to Break, pasamos al estado 3 y nos aparece el botón SET BREAK, este\r\n          setea el contador en el tiempo de descanso predeterminado (esto hay que cambiarlo cuando\r\n          el tiempo sea configurable). (ELIMINADO)\r\n\r\n      BACK TO STUDY = 6\r\n          Al setear el timer en Break, nos aparece el START y el BACK TO STUDY. Si iniciamos\r\n          arranca el Timer, si clickeamos BACK TO STUDY nos lleva al inicio del Timer.\r\n      STOP y BACK TO STUDY = 7\r\n          Al arrancar el timer, nos aparece los botones para detenerlo (STOP) y para volver\r\n          al inicio (BACK TO STUDY), este último solo se acciona cuando esta en STOP el Timer.\r\n      STOP y BACK TO STUDY = 8\r\n          Al parar el timer (STOP) en el Break Time, podemos seguir con el tiempo (RESUME) o\r\n          podemos volver al inicio con el BACK TO STUDY, que al estar STOP el timer, te lo permite.\r\n      CONFIG STUDY = 5\r\n          Si clickeamos el engranaje de configuración, nos aparecen los botones para sumar 5 minutos (+),\r\n          substraer 5 minutos (-) y guardar y volver con ese valor modificado (SAVE).\r\n      BACK TO STUDY FINAL = 4\r\n            Cuando termina el break, aparece el botón BACK TO STUDY para volver al inicio\r\n      CONFIG BREAK = 9\r\n            Cuando clickeamos el engranaje para configurar el Study Time y guardamos (SAVE), nos lleva a la\r\n            pantalla de configuración del Break Time con los mismos botones pero referenciado a las variables\r\n            correspondientes a Break.\r\n      \r\n\r\n  \r\n    var updateStudyMin = minutes,\r\n        updateStudySecs = seconds;\r\n  \r\n    const start = () => {\r\n      if(minutes === 0 && seconds === 0){\r\n        alert(\"setear timer\")\r\n       Swal.fire({\r\n          title: 'You must set the Timer before you start.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        run();\r\n        setStatus(1);\r\n        setInterv(setInterval(run, 1000));\r\n      }\r\n    }\r\n        \r\n    const run = () => {\r\n      if(updateStudySecs === 0){\r\n        if(updateStudyMin !== 0){\r\n          updateStudySecs = 59;\r\n          updateStudyMin--;\r\n        } else{\r\n          setStatus(3);\r\n        }\r\n        \r\n      } else {\r\n        updateStudySecs--;\r\n      }\r\n      setMinutes(updateStudyMin);\r\n      setSeconds(updateStudySecs);\r\n    }\r\n  \r\n    const stop = () => {\r\n      clearInterval(interv);\r\n      setStatus(2);\r\n    }\r\n  \r\n    const reset = () => {\r\n      if(status === 2 || status === 1){\r\n        stop();\r\n        Swal.fire({\r\n          title: 'Are you sure?',\r\n          text: 'This action will reset the values and return to the start.',\r\n          icon: 'warning',\r\n          customClass: 'background-swal',\r\n          confirmButtonText: 'Continue',\r\n          confirmButtonColor: 'red',\r\n          cancelButtonColor: 'green',\r\n          showCancelButton: true,\r\n          focusCancel: true,\r\n          reverseButtons: true,\r\n          allowEscapeKey: false,\r\n          cancelButtonText: 'Stay here',\r\n          closeOnClickOutside: false\r\n        }).then((resultado) => {\r\n          if (resultado.isConfirmed){\r\n            clearInterval(interv);\r\n            setStatus(0);\r\n            setMinutes(initialMinutes);\r\n            setSeconds(initialSeconds);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(welcomeMsg);\r\n            Swal.fire({\r\n              icon: 'success',\r\n              closeOnClickOutside: false,\r\n              showConfirmButton: false,\r\n              timer: 1500,\r\n              timerProgressBar: true\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n  \r\n    const resume = () => start();\r\n  \r\n    //      ----------------------------------------- BREAK FUNCTIONALITY´S -----------------------------------------\r\n\r\n    var updateBreakMin = breakMin,\r\n        updateBreakSecs = breakSec;\r\n\r\n    const runBreak = () => {\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        } else{\r\n          setStatus(4);\r\n        }\r\n        \r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n  \r\n    const breakRun = () =>{\r\n      setInterv(setInterval(runBreak, 1000));\r\n      setStatus(7);\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        }\r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n\r\n    const stopBreak = () => {\r\n      clearInterval(interv);\r\n      setStatus(8);\r\n    }\r\n\r\n    const resumeBreak = () => {\r\n      run();\r\n      setStatus(7);\r\n      setInterv(setInterval(runBreak, 1000));\r\n    }\r\n  \r\n    const goToBreak = () => {\r\n      if(status !== 2){\r\n        alert(\"parar reloj\")\r\n        Swal.fire({\r\n          text: 'You must stop the timer to perform this action.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }else{\r\n        setMsg(breakMsg);\r\n        setMinutes(initialMinutes);\r\n        setSeconds(initialSeconds);\r\n        setStatus(6);\r\n      }\r\n  \r\n    }\r\n    //      ----------------------------------------- CONFIG BREAK TIMER -----------------------------------------  \r\n\r\n    const configBreakTimer = () => {\r\n      if(status === 9){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addBreak = () => {\r\n      if(breakMin >= 0 && breakMin < 60){\r\n        setBreakMinutes(breakMin + 5);\r\n      } else {\r\n        alert(\"maximo alcanzado\")\r\n        \r\n        Swal.fire({\r\n          title: 'Cycle time limit reached!',\r\n          text: 'The maximum time for a break cycle is 60 minutes.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subBreak = () => {\r\n      if(breakMin > 0){\r\n        setBreakMinutes(breakMin - 5);\r\n      } else {\r\n        alert(\"tiempos negativos\")\r\n        \r\n        Swal.fire({\r\n          title: 'Be careful!',\r\n          text: 'You cannot set negative times for the break cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n\r\n    const backFromConfig = () => {\r\n      if(breakMin === 0){\r\n        alert(\"setear tiempo de descanso\")\r\n        \r\n        Swal.fire({\r\n          text: 'You must set the time for the break cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        setMsg(studyMsg);\r\n        setStatus(3);\r\n        Swal.fire({\r\n          text: 'Break cycle set to ' + breakMin + ' minutes.',\r\n          icon: 'success',\r\n          timer: 2500,\r\n          customClass: 'success-swal',\r\n          showConfirmButton: false,\r\n          timerProgressBar: true,\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n\r\n    //      ----------------------------------------- CONFIG STUDY TIMER -----------------------------------------  \r\n  \r\n    const backToStudy = () => {\r\n      if (status === 7){\r\n        \r\n        Swal.fire({\r\n          text: 'You must stop the timer to perform this action.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }else {\r\n        Swal.fire({\r\n          title: 'Are you sure?',\r\n          text: 'This action will reset the values and return to the start.',\r\n          confirmButtonText: 'Continue',\r\n          confirmButtonColor: 'red',\r\n          customClass: 'background-swal',\r\n          showCancelButton: true,\r\n          allowEscapeKey: false,\r\n          cancelButtonColor: 'green',\r\n          cancelButtonText: 'Stay here',\r\n          focusCancel: true,\r\n          reverseButtons: true,\r\n          icon: 'warning',\r\n          closeOnClickOutside: false\r\n        }).then((respuesta) =>{\r\n          if(respuesta.isConfirmed){\r\n            clearInterval(interv);\r\n            setStatus(0);\r\n            setMinutes(initialMinutes);\r\n            setSeconds(initialSeconds);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(welcomeMsg);\r\n            Swal.fire({\r\n              icon: 'success',\r\n              closeOnClickOutside: false,\r\n              showConfirmButton: false,\r\n              timer: 1500,\r\n              timerProgressBar: true\r\n            })\r\n          }\r\n        })\r\n      }\r\n  \r\n    }\r\n\r\n    const goToConfigBreak = () => {\r\n      if(minutes === 0){\r\n        alert(\"setee tiempo de estudio\")\r\n        \r\n        Swal.fire({\r\n          text: 'You must set the time for the study cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        setMsg(configBreakMsg);\r\n        setStatus(9);\r\n        \r\n        Swal.fire({\r\n          text: 'Study cycle was set to ' + minutes + ' minutes.',\r\n          icon: 'success',\r\n          timer: 2500,\r\n          customClass: 'success-swal',\r\n          showConfirmButton: false,\r\n          timerProgressBar: true,\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n  \r\n    const configTimer = () => {\r\n      alert(\"timer\")\r\n      setStatus(5);\r\n      setMsg(configMsg);\r\n      if(status === 5){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addTimer = () => {\r\n      if(minutes >= 0 && minutes < 60){\r\n        setMinutes(minutes + 5);\r\n      } else {\r\n        alert(\"maximo alcanzado\")\r\n        \r\n        Swal.fire({\r\n          title: 'Cycle time limit reached!',\r\n          text: 'The maximum time for a study cycle is 60 minutes.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subTimer = () => {\r\n      if(minutes > 0){\r\n        setMinutes(minutes - 5);\r\n      } else {\r\n        alert(\"tiempos negativos\")\r\n        \r\n        Swal.fire({\r\n          title: 'Be careful!',\r\n          text: 'You cannot set negative times for the study cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n    \r\n  return (\r\n        <div className='TimerFunctionality'>\r\n          <Message msg={msg}/>\r\n          <TimerView minutes={minutes} seconds={seconds} breakMin={breakMin} breakSec={breakSec} status={status}/>\r\n          <Buttons status={status} stop={stop} reset={reset} resume={resume} start={start} \r\n                  breakRun={breakRun} goToBreak={goToBreak} backToStudy={backToStudy} \r\n                  configTimer={configTimer} addTimer={addTimer} subTimer={subTimer} goToConfigBreak={goToConfigBreak}\r\n                  stopBreak={stopBreak} resumeBreak={resumeBreak} configBreakTimer={configBreakTimer}\r\n                  addBreak= {addBreak} subBreak={subBreak} backFromConfig={backFromConfig}/>\r\n        </div>\r\n  )*/","map":{"version":3,"names":["React","useState","TimerView","Buttons","Swal","TimerFunctionality","initialMinutes","initialSeconds","subCycleCount","setSubCycleCount","studyMinutes","setStudyMinutes","studySeconds","setStudySeconds","shortBreakMinutes","setShortBreakMinutes","shortBreakSeconds","setShortBreakSeconds","longBreakMinutes","setLongBreakMinutes","longBreakSeconds","setLongBreakSeconds","interv","setInterv","status","setStatus","userStudyTime","setUserStudyTime","userShortBreak","setUserShortBreak","userLongBreak","setUserLongBreak","studyStart","alert","studyRun","setInterval","updateStudyMin","updateStudySecs","clearInterval","updateSubCycleCount","shortBreakStart","shortBreakRun","updateShortBreakMin","updateShortBreakSecs","longBreakStart","longBreakRun","updateLongBreakSecs","updateLongBreakMin","configTimes","number","prompt","Number","number1","number3"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/TimerFunctionality.js"],"sourcesContent":["import React, {useState} from 'react'\r\nimport TimerView from './TimerView';\r\n//import TimerView from './TimerView'\r\nimport Buttons from './Buttons'\r\n//import Message from './Message'\r\nimport Swal from 'sweetalert2'\r\n\r\nfunction TimerFunctionality() {\r\n\r\nconst initialMinutes = 0;\r\nconst initialSeconds = 0;\r\nconst [subCycleCount, setSubCycleCount] = useState(0);\r\nconst [studyMinutes, setStudyMinutes] = useState(initialMinutes);\r\nconst [studySeconds, setStudySeconds] = useState(initialSeconds);\r\nconst [shortBreakMinutes, setShortBreakMinutes] = useState(initialMinutes);\r\nconst [shortBreakSeconds, setShortBreakSeconds] = useState(initialSeconds);\r\nconst [longBreakMinutes, setLongBreakMinutes] = useState(initialMinutes);\r\nconst [longBreakSeconds, setLongBreakSeconds] = useState(initialSeconds);\r\nconst [interv, setInterv] = useState();\r\nconst [status, setStatus] = useState(0);\r\n\r\nconst [userStudyTime, setUserStudyTime] = useState();\r\nconst [userShortBreak, setUserShortBreak] = useState();\r\nconst [userLongBreak, setUserLongBreak] = useState();\r\n\r\n\r\nconst studyStart = () => {\r\nif(studyMinutes === 0 && studySeconds === 0){\r\n  alert(\"Setear tiempo de estudio\");\r\n} else{\r\n  studyRun();\r\n  setInterv(setInterval(studyRun, 1));\r\n}\r\n}\r\n\r\nlet updateStudyMin = studyMinutes;\r\nlet updateStudySecs = studySeconds;\r\n\r\nconst studyRun = () => {\r\nif(updateStudySecs === 0){\r\n  if(updateStudyMin != 0){\r\n    updateStudyMin--;\r\n    updateStudySecs = 59;\r\n  } else{\r\n    if(updateStudySecs === 0){\r\n      setShortBreakMinutes(userShortBreak);\r\n      setStatus(2);\r\n      clearInterval(interv);\r\n    }\r\n  }\r\n} else {\r\n  updateStudySecs--;\r\n}\r\nsetStudyMinutes(updateStudyMin);\r\nsetStudySeconds(updateStudySecs);\r\n}\r\n\r\nlet updateSubCycleCount = subCycleCount;\r\n\r\nconst shortBreakStart = () =>{\r\n  shortBreakRun();\r\n  setInterv(setInterval(shortBreakRun, 1));\r\n  updateSubCycleCount += 1;\r\n  setSubCycleCount(updateSubCycleCount);\r\n}\r\n\r\nlet updateShortBreakMin = shortBreakMinutes;\r\nlet updateShortBreakSecs = shortBreakSeconds;\r\n\r\nconst shortBreakRun = () => {\r\n  if(updateShortBreakSecs === 0){\r\n    if(updateShortBreakMin != 0){\r\n      updateShortBreakMin--;\r\n      updateShortBreakSecs = 59;\r\n    } else{\r\n      if(subCycleCount === 4){\r\n        setSubCycleCount(0);\r\n        setStatus(3);\r\n        clearInterval(interv)\r\n      } else{\r\n        setStudyMinutes(userStudyTime);\r\n        setStatus(1);\r\n        clearInterval(interv);\r\n      }\r\n    }\r\n  } else {\r\n    updateShortBreakSecs--;\r\n  }\r\n  setShortBreakMinutes(updateShortBreakMin);\r\n  setShortBreakSeconds(updateShortBreakSecs);\r\n}\r\n\r\nconst longBreakStart = () =>{\r\n  longBreakRun();\r\n  setInterv(setInterval(longBreakRun, 0.5));\r\n}\r\n\r\nlet updateLongBreakSecs = longBreakSeconds;\r\nlet updateLongBreakMin = longBreakMinutes;\r\n\r\nconst longBreakRun = () => {\r\n  if(updateLongBreakSecs === 0){\r\n    if(updateLongBreakMin != 0){\r\n      updateLongBreakMin--;\r\n      updateLongBreakSecs = 59;\r\n    } else{\r\n      setStatus(3);\r\n      clearInterval(interv);\r\n    }\r\n  } else {\r\n    updateLongBreakSecs--;\r\n  }\r\n  setLongBreakMinutes(updateLongBreakMin);\r\n  setLongBreakSeconds(updateLongBreakSecs);\r\n}\r\n  \r\nconst configTimes = () => {\r\n  let number = prompt('Ingrese minutos de estudio');\r\n  if(Number(number)){\r\n    setStudyMinutes(number);\r\n    setUserStudyTime(number);\r\n  } else{\r\n    alert('invalid');\r\n  }\r\n\r\n  let number1 = prompt('Ingrese minutos de short break');\r\n  if(Number(number1)){\r\n    setShortBreakMinutes(number1);\r\n    setUserShortBreak(number1);\r\n  } else{\r\n    alert('invalid');\r\n  }\r\n\r\n  let number3 = prompt('Ingrese minutos de long break');\r\n  if(Number(number3)){\r\n    setLongBreakMinutes(number3);\r\n    setUserLongBreak(number3);\r\n  } else{\r\n    alert('invalid');\r\n  }\r\n  setStatus(1);\r\n}\r\n\r\n\r\n\r\nreturn (\r\n  <div>\r\n\r\n      <TimerView studyMinutes={studyMinutes} studySeconds={studySeconds} status={status} \r\n      shortBreakMinutes={shortBreakMinutes} shortBreakSeconds={shortBreakSeconds} longBreakMinutes={longBreakMinutes} \r\n      longBreakSeconds={longBreakSeconds} subCycleCount={subCycleCount}/>\r\n\r\n      <Buttons status={status} studyStart={studyStart} configTimes={configTimes} studyMinutes={studyMinutes} \r\n      shortBreakStart={shortBreakStart} longBreakStart={longBreakStart}/>\r\n\r\n  </div>\r\n)\r\n}\r\n\r\nexport default TimerFunctionality\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n/*\r\n    const initialMinutes = 0;\r\n    const initialSeconds = 0;\r\n    const breakMinutes = 0;\r\n    const breakSeconds = 0;\r\n    let breakMsg = 'Break Time';\r\n    let studyMsg = 'Study Time';\r\n    let configMsg = 'Study Timer Configuration'\r\n    let configBreakMsg = 'Break Timer Configuration'\r\n    let welcomeMsg = 'Pomodoro Study Sesion'\r\n  \r\n    const [minutes, setMinutes] = useState(initialMinutes);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n    const [breakMin, setBreakMinutes] = useState(breakMinutes);\r\n    const [breakSec, setBreakSeconds] = useState(breakSeconds);\r\n    const [msg, setMsg] = useState(welcomeMsg);\r\n    const [interv, setInterv] = useState();\r\n    const [status, setStatus] = useState(0);\r\n\r\n    \r\n    --------------------- EXPLICACIÓN DE ESTADOS (STATUS), LO QUE SE MUESTRA Y FUNCIONALIDADES --------------------- \r\n    Están de forma desordenada dado que a medida que avanzaba en el programa tuve que ir agregando\r\n    funcionalidades dependiendo las vistas y las acciones que se tomen.\r\n\r\n      NOT STARTED = 0\r\n          Muestra solo el botón de Configuraciónes y el Start.\r\n      STARTED = 1\r\n          Muestra el STOP, RESET y Go to Break, acá para ir al Break es necesario\r\n          pausar el timer (STOP) para que no se corrompa el Timer. Esto lanza una alerta\r\n          si se intenta ir al Break sin haberlo pausado.\r\n      STOPPED = 2\r\n          Cuando se pulsa STOP y se pausa el Timer, se pasa a este estado 2 donde se muestran\r\n          los botones de RESUME, RESET y Go to Break como el anterior, pero ahora si permite\r\n          cambiar a Break Time.\r\n\r\n      BREAK = 3 (ELIMINADO)\r\n          Si pulsamos Go to Break, pasamos al estado 3 y nos aparece el botón SET BREAK, este\r\n          setea el contador en el tiempo de descanso predeterminado (esto hay que cambiarlo cuando\r\n          el tiempo sea configurable). (ELIMINADO)\r\n\r\n      BACK TO STUDY = 6\r\n          Al setear el timer en Break, nos aparece el START y el BACK TO STUDY. Si iniciamos\r\n          arranca el Timer, si clickeamos BACK TO STUDY nos lleva al inicio del Timer.\r\n      STOP y BACK TO STUDY = 7\r\n          Al arrancar el timer, nos aparece los botones para detenerlo (STOP) y para volver\r\n          al inicio (BACK TO STUDY), este último solo se acciona cuando esta en STOP el Timer.\r\n      STOP y BACK TO STUDY = 8\r\n          Al parar el timer (STOP) en el Break Time, podemos seguir con el tiempo (RESUME) o\r\n          podemos volver al inicio con el BACK TO STUDY, que al estar STOP el timer, te lo permite.\r\n      CONFIG STUDY = 5\r\n          Si clickeamos el engranaje de configuración, nos aparecen los botones para sumar 5 minutos (+),\r\n          substraer 5 minutos (-) y guardar y volver con ese valor modificado (SAVE).\r\n      BACK TO STUDY FINAL = 4\r\n            Cuando termina el break, aparece el botón BACK TO STUDY para volver al inicio\r\n      CONFIG BREAK = 9\r\n            Cuando clickeamos el engranaje para configurar el Study Time y guardamos (SAVE), nos lleva a la\r\n            pantalla de configuración del Break Time con los mismos botones pero referenciado a las variables\r\n            correspondientes a Break.\r\n      \r\n\r\n  \r\n    var updateStudyMin = minutes,\r\n        updateStudySecs = seconds;\r\n  \r\n    const start = () => {\r\n      if(minutes === 0 && seconds === 0){\r\n        alert(\"setear timer\")\r\n       Swal.fire({\r\n          title: 'You must set the Timer before you start.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        run();\r\n        setStatus(1);\r\n        setInterv(setInterval(run, 1000));\r\n      }\r\n    }\r\n        \r\n    const run = () => {\r\n      if(updateStudySecs === 0){\r\n        if(updateStudyMin !== 0){\r\n          updateStudySecs = 59;\r\n          updateStudyMin--;\r\n        } else{\r\n          setStatus(3);\r\n        }\r\n        \r\n      } else {\r\n        updateStudySecs--;\r\n      }\r\n      setMinutes(updateStudyMin);\r\n      setSeconds(updateStudySecs);\r\n    }\r\n  \r\n    const stop = () => {\r\n      clearInterval(interv);\r\n      setStatus(2);\r\n    }\r\n  \r\n    const reset = () => {\r\n      if(status === 2 || status === 1){\r\n        stop();\r\n        Swal.fire({\r\n          title: 'Are you sure?',\r\n          text: 'This action will reset the values and return to the start.',\r\n          icon: 'warning',\r\n          customClass: 'background-swal',\r\n          confirmButtonText: 'Continue',\r\n          confirmButtonColor: 'red',\r\n          cancelButtonColor: 'green',\r\n          showCancelButton: true,\r\n          focusCancel: true,\r\n          reverseButtons: true,\r\n          allowEscapeKey: false,\r\n          cancelButtonText: 'Stay here',\r\n          closeOnClickOutside: false\r\n        }).then((resultado) => {\r\n          if (resultado.isConfirmed){\r\n            clearInterval(interv);\r\n            setStatus(0);\r\n            setMinutes(initialMinutes);\r\n            setSeconds(initialSeconds);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(welcomeMsg);\r\n            Swal.fire({\r\n              icon: 'success',\r\n              closeOnClickOutside: false,\r\n              showConfirmButton: false,\r\n              timer: 1500,\r\n              timerProgressBar: true\r\n            })\r\n          }\r\n        })\r\n      }\r\n    }\r\n  \r\n    const resume = () => start();\r\n  \r\n    //      ----------------------------------------- BREAK FUNCTIONALITY´S -----------------------------------------\r\n\r\n    var updateBreakMin = breakMin,\r\n        updateBreakSecs = breakSec;\r\n\r\n    const runBreak = () => {\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        } else{\r\n          setStatus(4);\r\n        }\r\n        \r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n  \r\n    const breakRun = () =>{\r\n      setInterv(setInterval(runBreak, 1000));\r\n      setStatus(7);\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        }\r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n\r\n    const stopBreak = () => {\r\n      clearInterval(interv);\r\n      setStatus(8);\r\n    }\r\n\r\n    const resumeBreak = () => {\r\n      run();\r\n      setStatus(7);\r\n      setInterv(setInterval(runBreak, 1000));\r\n    }\r\n  \r\n    const goToBreak = () => {\r\n      if(status !== 2){\r\n        alert(\"parar reloj\")\r\n        Swal.fire({\r\n          text: 'You must stop the timer to perform this action.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }else{\r\n        setMsg(breakMsg);\r\n        setMinutes(initialMinutes);\r\n        setSeconds(initialSeconds);\r\n        setStatus(6);\r\n      }\r\n  \r\n    }\r\n    //      ----------------------------------------- CONFIG BREAK TIMER -----------------------------------------  \r\n\r\n    const configBreakTimer = () => {\r\n      if(status === 9){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addBreak = () => {\r\n      if(breakMin >= 0 && breakMin < 60){\r\n        setBreakMinutes(breakMin + 5);\r\n      } else {\r\n        alert(\"maximo alcanzado\")\r\n        \r\n        Swal.fire({\r\n          title: 'Cycle time limit reached!',\r\n          text: 'The maximum time for a break cycle is 60 minutes.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subBreak = () => {\r\n      if(breakMin > 0){\r\n        setBreakMinutes(breakMin - 5);\r\n      } else {\r\n        alert(\"tiempos negativos\")\r\n        \r\n        Swal.fire({\r\n          title: 'Be careful!',\r\n          text: 'You cannot set negative times for the break cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n\r\n    const backFromConfig = () => {\r\n      if(breakMin === 0){\r\n        alert(\"setear tiempo de descanso\")\r\n        \r\n        Swal.fire({\r\n          text: 'You must set the time for the break cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        setMsg(studyMsg);\r\n        setStatus(3);\r\n        Swal.fire({\r\n          text: 'Break cycle set to ' + breakMin + ' minutes.',\r\n          icon: 'success',\r\n          timer: 2500,\r\n          customClass: 'success-swal',\r\n          showConfirmButton: false,\r\n          timerProgressBar: true,\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n\r\n    //      ----------------------------------------- CONFIG STUDY TIMER -----------------------------------------  \r\n  \r\n    const backToStudy = () => {\r\n      if (status === 7){\r\n        \r\n        Swal.fire({\r\n          text: 'You must stop the timer to perform this action.',\r\n          icon: 'info',\r\n          button: 'OK',\r\n          customClass: 'background-swal',\r\n          iconColor: '#07C2DF',\r\n          confirmButtonColor: '#07C2DF',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }else {\r\n        Swal.fire({\r\n          title: 'Are you sure?',\r\n          text: 'This action will reset the values and return to the start.',\r\n          confirmButtonText: 'Continue',\r\n          confirmButtonColor: 'red',\r\n          customClass: 'background-swal',\r\n          showCancelButton: true,\r\n          allowEscapeKey: false,\r\n          cancelButtonColor: 'green',\r\n          cancelButtonText: 'Stay here',\r\n          focusCancel: true,\r\n          reverseButtons: true,\r\n          icon: 'warning',\r\n          closeOnClickOutside: false\r\n        }).then((respuesta) =>{\r\n          if(respuesta.isConfirmed){\r\n            clearInterval(interv);\r\n            setStatus(0);\r\n            setMinutes(initialMinutes);\r\n            setSeconds(initialSeconds);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(welcomeMsg);\r\n            Swal.fire({\r\n              icon: 'success',\r\n              closeOnClickOutside: false,\r\n              showConfirmButton: false,\r\n              timer: 1500,\r\n              timerProgressBar: true\r\n            })\r\n          }\r\n        })\r\n      }\r\n  \r\n    }\r\n\r\n    const goToConfigBreak = () => {\r\n      if(minutes === 0){\r\n        alert(\"setee tiempo de estudio\")\r\n        \r\n        Swal.fire({\r\n          text: 'You must set the time for the study cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      } else {\r\n        setMsg(configBreakMsg);\r\n        setStatus(9);\r\n        \r\n        Swal.fire({\r\n          text: 'Study cycle was set to ' + minutes + ' minutes.',\r\n          icon: 'success',\r\n          timer: 2500,\r\n          customClass: 'success-swal',\r\n          showConfirmButton: false,\r\n          timerProgressBar: true,\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n  \r\n    const configTimer = () => {\r\n      alert(\"timer\")\r\n      setStatus(5);\r\n      setMsg(configMsg);\r\n      if(status === 5){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addTimer = () => {\r\n      if(minutes >= 0 && minutes < 60){\r\n        setMinutes(minutes + 5);\r\n      } else {\r\n        alert(\"maximo alcanzado\")\r\n        \r\n        Swal.fire({\r\n          title: 'Cycle time limit reached!',\r\n          text: 'The maximum time for a study cycle is 60 minutes.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subTimer = () => {\r\n      if(minutes > 0){\r\n        setMinutes(minutes - 5);\r\n      } else {\r\n        alert(\"tiempos negativos\")\r\n        \r\n        Swal.fire({\r\n          title: 'Be careful!',\r\n          text: 'You cannot set negative times for the study cycle.',\r\n          icon: 'error',\r\n          customClass: 'background-swal',\r\n          iconColor: '#E34343',\r\n          confirmButtonColor: '#07C2DF',\r\n          button: 'Ok',\r\n          allowEscapeKey: true,\r\n          allowOutsideClick: false\r\n        })\r\n      }\r\n    }\r\n    \r\n  return (\r\n        <div className='TimerFunctionality'>\r\n          <Message msg={msg}/>\r\n          <TimerView minutes={minutes} seconds={seconds} breakMin={breakMin} breakSec={breakSec} status={status}/>\r\n          <Buttons status={status} stop={stop} reset={reset} resume={resume} start={start} \r\n                  breakRun={breakRun} goToBreak={goToBreak} backToStudy={backToStudy} \r\n                  configTimer={configTimer} addTimer={addTimer} subTimer={subTimer} goToConfigBreak={goToConfigBreak}\r\n                  stopBreak={stopBreak} resumeBreak={resumeBreak} configBreakTimer={configBreakTimer}\r\n                  addBreak= {addBreak} subBreak={subBreak} backFromConfig={backFromConfig}/>\r\n        </div>\r\n  )*/\r\n"],"mappings":"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AAD,CAAnB;MACAtB,gBAAgB,CAACsB,OAAD,CAAhB;IACD,CAHD,MAGM;MACJpB,KAAK,CAAC,SAAD,CAAL;IACD;;IACDR,SAAS,CAAC,CAAD,CAAT;EACD,CAzBD;;EA6BA,oBACE;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,gBAEI,oBAAC,SAAD;IAAW,YAAY,EAAEf,YAAzB;IAAuC,YAAY,EAAEE,YAArD;IAAmE,MAAM,EAAEY,MAA3E;IACA,iBAAiB,EAAEV,iBADnB;IACsC,iBAAiB,EAAEE,iBADzD;IAC4E,gBAAgB,EAAEE,gBAD9F;IAEA,gBAAgB,EAAEE,gBAFlB;IAEoC,aAAa,EAAEZ,aAFnD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EAFJ,eAMI,oBAAC,OAAD;IAAS,MAAM,EAAEgB,MAAjB;IAAyB,UAAU,EAAEQ,UAArC;IAAiD,WAAW,EAAEgB,WAA9D;IAA2E,YAAY,EAAEtC,YAAzF;IACA,eAAe,EAAE8B,eADjB;IACkC,cAAc,EAAEI,cADlD;IAAA;IAAA;MAAA;MAAA;MAAA;IAAA;EAAA,EANJ,CADF;AAYC;;AAED,eAAevC,kBAAf;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}