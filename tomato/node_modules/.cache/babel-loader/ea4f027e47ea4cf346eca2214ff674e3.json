{"ast":null,"code":"import _regeneratorRuntime from \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { getApp } from 'firebase/app';\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\nvar initialState = {\n  rooms: [],\n  error: null\n};\nexport var roomSlice = createSlice({\n  name: 'room',\n  initialState: initialState,\n  reducers: {\n    setRooms: function setRooms(state, action) {\n      state.rooms = action.payload.rooms;\n    }\n  }\n});\nvar setRooms = roomSlice.actions.setRooms;\nvar fetchAllRooms = createAsyncThunk('fetchAllRooms', /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(_, thunkAPI) {\n    var app, db;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            app = getApp();\n            db = getFirestore(app);\n            onSnapshot(collection(db, \"room\"), function (snapshot) {\n              var rooms = snapshot.docs.map(function (doc) {\n                return doc.data();\n              });\n              return thunkAPI.dispatch(setRooms({\n                rooms: rooms\n              }));\n            }, function (error) {\n              console.log(error);\n              return thunkAPI.dispatch(setRooms({\n                error: error.message,\n                rooms: []\n              }));\n            });\n            return _context.abrupt(\"return\", thunkAPI.dispatch(setRooms(initialState)));\n\n          case 7:\n            _context.prev = 7;\n            _context.t0 = _context[\"catch\"](0);\n            console.log(_context.t0);\n            return _context.abrupt(\"return\", thunkAPI.dispatch(setRooms({\n              error: _context.t0.message,\n              rooms: []\n            })));\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 7]]);\n  }));\n\n  return function (_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}());\nexport { // Thunks\nfetchAllRooms, // Reducers\nsetRooms };\nexport default roomSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","getApp","getFirestore","collection","onSnapshot","initialState","rooms","error","roomSlice","name","reducers","setRooms","state","action","payload","actions","fetchAllRooms","_","thunkAPI","app","db","snapshot","docs","map","doc","data","dispatch","console","log","message","reducer"],"sources":["C:/Users/Bruno/github/poss/tomato/src/redux/slices/room.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit'\r\nimport { getApp } from 'firebase/app';\r\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\r\n\r\nconst initialState = {\r\n    rooms: [],\r\n    error: null,\r\n};\r\n\r\nexport const roomSlice = createSlice({\r\n    name: 'room',\r\n    initialState,\r\n    reducers: {\r\n        setRooms: (state, action) => {\r\n            state.rooms = action.payload.rooms;\r\n        },\r\n    },\r\n})\r\n\r\nconst { \r\n    setRooms,\r\n} = roomSlice.actions\r\n\r\nconst fetchAllRooms = createAsyncThunk(\r\n    'fetchAllRooms',\r\n    async (_, thunkAPI) => {\r\n        try {\r\n            const app = getApp();\r\n            const db = getFirestore(app);\r\n            onSnapshot(collection(db, \"room\"),\r\n            (snapshot) => {\r\n                const rooms = snapshot.docs.map((doc) => doc.data());\r\n                return thunkAPI.dispatch(setRooms({ rooms }));\r\n            },\r\n            (error) => {\r\n                console.log(error);\r\n                return thunkAPI.dispatch(setRooms({ error: error.message, rooms: [] }));\r\n            });\r\n            return thunkAPI.dispatch(setRooms(initialState));\r\n        } catch (error) {\r\n            console.log(error);\r\n            return thunkAPI.dispatch(setRooms({ error: error.message, rooms: [] }));\r\n        }\r\n    }\r\n)\r\n\r\nexport {\r\n    // Thunks\r\n    fetchAllRooms,\r\n    // Reducers\r\n    setRooms,\r\n};\r\n\r\nexport default roomSlice.reducer"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,QAAqD,oBAArD;AAEA,IAAMC,YAAY,GAAG;EACjBC,KAAK,EAAE,EADU;EAEjBC,KAAK,EAAE;AAFU,CAArB;AAKA,OAAO,IAAMC,SAAS,GAAGT,WAAW,CAAC;EACjCU,IAAI,EAAE,MAD2B;EAEjCJ,YAAY,EAAZA,YAFiC;EAGjCK,QAAQ,EAAE;IACNC,QAAQ,EAAE,kBAACC,KAAD,EAAQC,MAAR,EAAmB;MACzBD,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACC,OAAP,CAAeR,KAA7B;IACH;EAHK;AAHuB,CAAD,CAA7B;IAWHK,Q,GACAH,SAAS,CAACO,O,CADVJ,Q;AAGJ,IAAMK,aAAa,GAAGhB,gBAAgB,CAClC,eADkC;EAAA,oEAElC,iBAAOiB,CAAP,EAAUC,QAAV;IAAA;IAAA;MAAA;QAAA;UAAA;YAAA;YAEcC,GAFd,GAEoBlB,MAAM,EAF1B;YAGcmB,EAHd,GAGmBlB,YAAY,CAACiB,GAAD,CAH/B;YAIQf,UAAU,CAACD,UAAU,CAACiB,EAAD,EAAK,MAAL,CAAX,EACV,UAACC,QAAD,EAAc;cACV,IAAMf,KAAK,GAAGe,QAAQ,CAACC,IAAT,CAAcC,GAAd,CAAkB,UAACC,GAAD;gBAAA,OAASA,GAAG,CAACC,IAAJ,EAAT;cAAA,CAAlB,CAAd;cACA,OAAOP,QAAQ,CAACQ,QAAT,CAAkBf,QAAQ,CAAC;gBAAEL,KAAK,EAALA;cAAF,CAAD,CAA1B,CAAP;YACH,CAJS,EAKV,UAACC,KAAD,EAAW;cACPoB,OAAO,CAACC,GAAR,CAAYrB,KAAZ;cACA,OAAOW,QAAQ,CAACQ,QAAT,CAAkBf,QAAQ,CAAC;gBAAEJ,KAAK,EAAEA,KAAK,CAACsB,OAAf;gBAAwBvB,KAAK,EAAE;cAA/B,CAAD,CAA1B,CAAP;YACH,CARS,CAAV;YAJR,iCAaeY,QAAQ,CAACQ,QAAT,CAAkBf,QAAQ,CAACN,YAAD,CAA1B,CAbf;;UAAA;YAAA;YAAA;YAeQsB,OAAO,CAACC,GAAR;YAfR,iCAgBeV,QAAQ,CAACQ,QAAT,CAAkBf,QAAQ,CAAC;cAAEJ,KAAK,EAAE,YAAMsB,OAAf;cAAwBvB,KAAK,EAAE;YAA/B,CAAD,CAA1B,CAhBf;;UAAA;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAFkC;;EAAA;IAAA;EAAA;AAAA,IAAtC;AAuBA,SACI;AACAU,aAFJ,EAGI;AACAL,QAJJ;AAOA,eAAeH,SAAS,CAACsB,OAAzB"},"metadata":{},"sourceType":"module"}