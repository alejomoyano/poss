{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Usuario\\\\Documents\\\\GitHub\\\\poss\\\\tomato\\\\src\\\\components\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useRef } from \"react\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FirebaseError, getApp } from \"firebase/app\";\nimport { getFirestore, collection, onSnapshot, deleteField, updateDoc, doc, setDoc, getDoc, arrayUnion, arrayRemove } from \"firebase/firestore\";\nimport { Message } from './Mensaje';\nimport { selectChatId, selectChatName } from \"../redux/slices/ChatSlice\";\nimport './Chat.css';\nimport ChatHeader from \"./ChatHeader\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ChatScreen() {\n  _s();\n\n  const [inputMensaje, setInputMensaje] = useState(\"\"); //para setear mensajes\n\n  const [MessageList, setMessageList] = useState([]); //array con la collecion de mensajes\n\n  const chatId = useSelector(selectChatId);\n  const chatName = useSelector(selectChatName);\n  const app = getApp();\n  const db = getFirestore(app); //maneja el envio de mensajes guardandolos en MessageList\n\n  function sendMessage(e) {\n    e.preventDefault();\n    db.collection('chat').doc(chatId).collection('mensajes').add({\n      message: inputMensaje,\n      usuername: 'Ignacio'\n    });\n    setInputMensaje(\" \"); //console.log(message)\n  }\n\n  useEffect(() => {\n    const element = document.getElementById();\n  }); //guarda los mensajes en el local storage\n\n  useEffect(() => {\n    if (chatId) {\n      db.collection('chat').doc(chatId).collection('mensajes').orderBy('timestamp', 'asc').onSnapshot(snapshot => setMessageList(snapshot.docs.map(doc => ({\n        id: doc.id,\n        data: doc.data()\n      }))));\n    }\n  }, [chatId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat\",\n    children: [/*#__PURE__*/_jsxDEV(ChatHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), MessageList.map((id, data) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat_messages\",\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"form-control bg-black btn mt-2\",\n          style: {\n            textAlign: \"left\",\n            fontWeight: \"bold\"\n          },\n          children: data\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 21\n      }, this)\n    }, id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 17\n    }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat__input\",\n      children: [/*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: sendMessage,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          disabled: false,\n          value: inputMensaje,\n          onChange: e => setInputMensaje(e.target.value),\n          placeholder: \"Type your message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          disabled: false,\n          value: inputMensaje,\n          className: \"chat__inputButton\",\n          type: \"submit\",\n          children: \"Send Message\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"chat__inputIcons\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"link\", {\n        href: \"Chat.css\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 13\n  }, this);\n}\n\n_s(ChatScreen, \"2ANSVNxC1uF2mIb6PHQmfNy+RWo=\", false, function () {\n  return [useSelector, useSelector];\n});\n\n_c = ChatScreen;\nexport default ChatScreen;\n\nvar _c;\n\n$RefreshReg$(_c, \"ChatScreen\");","map":{"version":3,"names":["React","useState","useEffect","useRef","useDispatch","useSelector","FirebaseError","getApp","getFirestore","collection","onSnapshot","deleteField","updateDoc","doc","setDoc","getDoc","arrayUnion","arrayRemove","Message","selectChatId","selectChatName","ChatHeader","ChatScreen","inputMensaje","setInputMensaje","MessageList","setMessageList","chatId","chatName","app","db","sendMessage","e","preventDefault","add","message","usuername","element","document","getElementById","orderBy","snapshot","docs","map","id","data","textAlign","fontWeight","target","value"],"sources":["C:/Users/Usuario/Documents/GitHub/poss/tomato/src/components/Chat.js"],"sourcesContent":["import React, {useState, useEffect, useRef} from \"react\";\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport { FirebaseError, getApp } from \"firebase/app\";\r\nimport {\r\n  getFirestore,\r\n  collection,\r\n  onSnapshot,\r\n  deleteField,\r\n  updateDoc,\r\n  doc,\r\n  setDoc,\r\n  getDoc,\r\n  arrayUnion,\r\n  arrayRemove,\r\n} from \"firebase/firestore\";\r\nimport { Message } from './Mensaje';\r\nimport { selectChatId, selectChatName} from \"../redux/slices/ChatSlice\";\r\n\r\n\r\n\r\nimport './Chat.css';\r\nimport ChatHeader from \"./ChatHeader\";\r\n\r\n\r\n\r\nfunction ChatScreen(){\r\n    \r\n    \r\n    const [inputMensaje, setInputMensaje] = useState(\"\"); //para setear mensajes\r\n    const [MessageList, setMessageList] = useState([]); //array con la collecion de mensajes\r\n    const chatId = useSelector(selectChatId)\r\n    const chatName = useSelector(selectChatName)\r\n    const app = getApp()\r\n    const db = getFirestore(app)\r\n    //maneja el envio de mensajes guardandolos en MessageList\r\n\r\n  \r\n\r\n    function sendMessage(e){\r\n        e.preventDefault();\r\n        db.collection('chat').doc(chatId).collection('mensajes').add({\r\n            \r\n            message: inputMensaje,\r\n            usuername: 'Ignacio'\r\n\r\n        })\r\n        \r\n        \r\n        \r\n        \r\n        setInputMensaje(\" \")\r\n        //console.log(message)\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const element = document.getElementById()\r\n    })\r\n\r\n   \r\n    //guarda los mensajes en el local storage\r\n    useEffect(()=>{\r\n        if(chatId){\r\n            db.collection('chat')\r\n                .doc(chatId)\r\n                .collection('mensajes')\r\n                .orderBy('timestamp', 'asc')\r\n                .onSnapshot((snapshot) =>\r\n                    setMessageList(\r\n                        snapshot.docs.map((doc)=>({\r\n                            id: doc.id,\r\n                            data: doc.data()\r\n                        }))\r\n                    )\r\n                )\r\n\r\n        }\r\n        \r\n    },[chatId])\r\n    \r\n    return( <div className=\"chat\">\r\n\r\n        <ChatHeader />\r\n        \r\n        \r\n            \r\n            {MessageList.map((id, data)=>(\r\n                <React.Fragment key={id}>\r\n                    <div className=\"chat_messages\">\r\n                        <span className=\"form-control bg-black btn mt-2\" \r\n                        style={{textAlign: \"left\",fontWeight: \"bold\"}}>\r\n                            {data}\r\n                        </span>\r\n                    </div>\r\n                </React.Fragment>\r\n            ))}\r\n        \r\n        \r\n        <div className=\"chat__input\">\r\n           \r\n           \r\n                <form onSubmit={sendMessage}>\r\n                    <input type=\"text\" \r\n                    disabled={false} \r\n                    value={inputMensaje} \r\n                    onChange={(e)=>setInputMensaje(e.target.value)} \r\n                    placeholder=\"Type your message\"\r\n                    />\r\n\r\n                    <button disabled={false} value={inputMensaje} className=\"chat__inputButton\" type=\"submit\">\r\n                        Send Message\r\n                    </button>\r\n\r\n                </form>\r\n            \r\n\r\n            <div className=\"chat__inputIcons\">\r\n               \r\n                \r\n            </div>\r\n            <link href=\"Chat.css\"></link>\r\n        </div>\r\n    \r\n    </div>\r\n    )\r\n\r\n}\r\n\r\nexport default ChatScreen;"],"mappings":"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"},"metadata":{},"sourceType":"module"}