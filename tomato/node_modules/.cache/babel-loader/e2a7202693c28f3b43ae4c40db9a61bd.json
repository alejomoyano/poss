{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport Swal from \"sweetalert2\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\nconst ConfigAlert = () => {\n  _s();\n\n  const {\n    values: {\n      status\n    }\n  } = useSelector(state => state.timer);\n  Swal.fire({\n    title: \"Timer Configuration\",\n    html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n    confirmButtonText: \"Confirm\",\n    allowOutsideClick: false,\n    allowEscapeKey: false,\n    focusConfirm: false,\n    preConfirm: () => {\n      const configStudyTime = Swal.getPopup().querySelector(\"#study-time\").value;\n      const configShortBreak = Swal.getPopup().querySelector(\"#short-break\").value;\n      const configLongBreak = Swal.getPopup().querySelector(\"#long-break\").value;\n\n      if (!configStudyTime || !configShortBreak || !configLongBreak) {\n        Swal.showValidationMessage(`Please configure the timer`);\n      }\n\n      return {\n        configStudyTime: configStudyTime,\n        configShortBreak: configShortBreak,\n        configLongBreak: configLongBreak\n      };\n    }\n  }).then(result => {\n    Swal.fire({\n      confirmButtonText: \"Ok\",\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      focusConfirm: false,\n      title: `Study Time: ${result.value.configStudyTime} minutes\n            Short Break Time: ${result.value.configShortBreak} minutes\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim()\n    }); // return {\n    //     studyTime: result.value.configStudyTime,\n    //     shortBreak: result.value.configShortBreak,\n    //     longBreak: result.value.configLongBreak\n    // }\n\n    dispatch(resetSubCycle()); //setMsg(\"Study Time\");\n\n    dispatch(setMsg(\"Study Time\")); //setStatus(1);\n\n    dispatch(setStatus(1));\n\n    if (status === 4) {\n      BackToStart();\n    }\n\n    dispatch(setMinutes(studyTime));\n    dispatch(setTimes({\n      studyTime: studyTime,\n      shortBreak: shortBreak,\n      longBreak: longBreak\n    }));\n  });\n};\n\n_s(ConfigAlert, \"VlOBx6ugcwc8RUzk0W4606jrJSU=\", false, function () {\n  return [useSelector];\n});\n\n_c = ConfigAlert;\nexport default configAlert;\n\nvar _c;\n\n$RefreshReg$(_c, \"ConfigAlert\");","map":{"version":3,"names":["Swal","useDispatch","useSelector","ConfigAlert","values","status","state","timer","fire","title","html","confirmButtonText","allowOutsideClick","allowEscapeKey","focusConfirm","preConfirm","configStudyTime","getPopup","querySelector","value","configShortBreak","configLongBreak","showValidationMessage","then","result","trim","dispatch","resetSubCycle","setMsg","setStatus","BackToStart","setMinutes","studyTime","setTimes","shortBreak","longBreak","configAlert"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/ConfigAlert.js"],"sourcesContent":["import Swal from \"sweetalert2\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n\r\nconst ConfigAlert = () =>{\r\n\r\n  const { values: {status} } = useSelector((state) => state.timer);\r\n\r\n    Swal.fire({\r\n        title: \"Timer Configuration\",\r\n        html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n        confirmButtonText: \"Confirm\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n        focusConfirm: false,\r\n        preConfirm: () => {\r\n          const configStudyTime =\r\n            Swal.getPopup().querySelector(\"#study-time\").value;\r\n          const configShortBreak =\r\n            Swal.getPopup().querySelector(\"#short-break\").value;\r\n          const configLongBreak =\r\n            Swal.getPopup().querySelector(\"#long-break\").value;\r\n          if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n            Swal.showValidationMessage(`Please configure the timer`);\r\n          }\r\n          return {\r\n            configStudyTime: configStudyTime,\r\n            configShortBreak: configShortBreak,\r\n            configLongBreak: configLongBreak,\r\n          };\r\n        },\r\n      }).then((result) => {\r\n        Swal.fire({\r\n          confirmButtonText: \"Ok\",\r\n          allowOutsideClick: false,\r\n          allowEscapeKey: false,\r\n          focusConfirm: false,\r\n          title: `Study Time: ${result.value.configStudyTime} minutes\r\n            Short Break Time: ${result.value.configShortBreak} minutes\r\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n        });\r\n        // return {\r\n        //     studyTime: result.value.configStudyTime,\r\n        //     shortBreak: result.value.configShortBreak,\r\n        //     longBreak: result.value.configLongBreak\r\n        // }\r\n\r\n        dispatch(resetSubCycle());\r\n        //setMsg(\"Study Time\");\r\n        dispatch(setMsg(\"Study Time\"));\r\n        //setStatus(1);\r\n        dispatch(setStatus(1));\r\n    \r\n        if (status === 4) {\r\n          BackToStart();\r\n        }\r\n    \r\n        dispatch(setMinutes(studyTime));\r\n    \r\n        dispatch(\r\n          setTimes({\r\n            studyTime: studyTime,\r\n            shortBreak: shortBreak,\r\n            longBreak: longBreak,\r\n          })\r\n        );\r\n\r\n    });\r\n}\r\nexport default configAlert;\r\n"],"mappings":";;AAAA,OAAOA,IAAP,MAAiB,aAAjB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;;AAGA,MAAMC,WAAW,GAAG,MAAK;EAAA;;EAEvB,MAAM;IAAEC,MAAM,EAAE;MAACC;IAAD;EAAV,IAAuBH,WAAW,CAAEI,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAAxC;EAEEP,IAAI,CAACQ,IAAL,CAAU;IACNC,KAAK,EAAE,qBADD;IAENC,IAAI,EAAG;AACf;AACA,+GAJc;IAKNC,iBAAiB,EAAE,SALb;IAMNC,iBAAiB,EAAE,KANb;IAONC,cAAc,EAAE,KAPV;IAQNC,YAAY,EAAE,KARR;IASNC,UAAU,EAAE,MAAM;MAChB,MAAMC,eAAe,GACnBhB,IAAI,CAACiB,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;MAEA,MAAMC,gBAAgB,GACpBpB,IAAI,CAACiB,QAAL,GAAgBC,aAAhB,CAA8B,cAA9B,EAA8CC,KADhD;MAEA,MAAME,eAAe,GACnBrB,IAAI,CAACiB,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;;MAEA,IAAI,CAACH,eAAD,IAAoB,CAACI,gBAArB,IAAyC,CAACC,eAA9C,EAA+D;QAC7DrB,IAAI,CAACsB,qBAAL,CAA4B,4BAA5B;MACD;;MACD,OAAO;QACLN,eAAe,EAAEA,eADZ;QAELI,gBAAgB,EAAEA,gBAFb;QAGLC,eAAe,EAAEA;MAHZ,CAAP;IAKD;EAxBK,CAAV,EAyBKE,IAzBL,CAyBWC,MAAD,IAAY;IAClBxB,IAAI,CAACQ,IAAL,CAAU;MACRG,iBAAiB,EAAE,IADX;MAERC,iBAAiB,EAAE,KAFX;MAGRC,cAAc,EAAE,KAHR;MAIRC,YAAY,EAAE,KAJN;MAKRL,KAAK,EAAG,eAAce,MAAM,CAACL,KAAP,CAAaH,eAAgB;AAC7D,gCAAgCQ,MAAM,CAACL,KAAP,CAAaC,gBAAiB;AAC9D,+BAA+BI,MAAM,CAACL,KAAP,CAAaE,eAAgB,UAF3C,CAEqDI,IAFrD;IALC,CAAV,EADkB,CAUlB;IACA;IACA;IACA;IACA;;IAEAC,QAAQ,CAACC,aAAa,EAAd,CAAR,CAhBkB,CAiBlB;;IACAD,QAAQ,CAACE,MAAM,CAAC,YAAD,CAAP,CAAR,CAlBkB,CAmBlB;;IACAF,QAAQ,CAACG,SAAS,CAAC,CAAD,CAAV,CAAR;;IAEA,IAAIxB,MAAM,KAAK,CAAf,EAAkB;MAChByB,WAAW;IACZ;;IAEDJ,QAAQ,CAACK,UAAU,CAACC,SAAD,CAAX,CAAR;IAEAN,QAAQ,CACNO,QAAQ,CAAC;MACPD,SAAS,EAAEA,SADJ;MAEPE,UAAU,EAAEA,UAFL;MAGPC,SAAS,EAAEA;IAHJ,CAAD,CADF,CAAR;EAQH,CA7DD;AA8DH,CAlED;;GAAMhC,W;UAEyBD,W;;;KAFzBC,W;AAmEN,eAAeiC,WAAf"},"metadata":{},"sourceType":"module"}