{"ast":null,"code":"import status from './TimerFunctionality'; //  Study Time functions\n\nconst studyStart = () => {\n  if (status === 1) {\n    updateSubCycleCount += 1;\n    setSubCycleCount(updateSubCycleCount);\n\n    if (updateSubCycleCount === 4) {\n      updateCycleCount += 1;\n      setCycleCount(updateCycleCount);\n    }\n  }\n\n  clearInterval(interv);\n\n  if (actualMinutes === 0 && actualSeconds === 0) {\n    alert(\"Set study time\");\n  } else {\n    studyRun();\n    setStatus(5);\n    setInterv(setInterval(studyRun, 5));\n  }\n};\n\nconst studyRun = () => {\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n      setActualMinutes(updateMinutes);\n      setActualSeconds(updateSeconds);\n    } else {\n      setActualMinutes(userShortBreak);\n      setMsg(\"Short Break Time\");\n      setStatus(2);\n    }\n\n    if (subCycleCount >= 3 && updateSeconds === 0 && updateMinutes === 0) {\n      setMsg(\"Long Break Time\");\n      setStatus(3);\n      clearInterval(interv);\n      setActualMinutes(userLongBreak);\n    }\n  } else {\n    updateSeconds--;\n    setActualMinutes(updateMinutes);\n    setActualSeconds(updateSeconds);\n  }\n}; //  Short Break functions\n\n\nconst shortBreakStart = () => {\n  clearInterval(interv);\n  setStatus(7);\n  shortBreakRun();\n  setInterv(setInterval(shortBreakRun, 5));\n};\n\nconst shortBreakRun = () => {\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n      setActualMinutes(updateMinutes);\n      setActualSeconds(updateSeconds);\n    } else {\n      setActualMinutes(userStudyTime);\n      setMsg(\"Study Time\");\n      setStatus(1);\n    }\n  } else {\n    updateSeconds--;\n    setActualMinutes(updateMinutes);\n    setActualSeconds(updateSeconds);\n  }\n}; // Long Break functions\n\n\nconst longBreakStart = () => {\n  clearInterval(interv);\n  setStatus(9);\n  longBreakRun();\n  setInterv(setInterval(longBreakRun, 5));\n};\n\nconst longBreakRun = () => {\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n    } else {\n      setStatus(4);\n    }\n  } else {\n    updateSeconds--;\n  }\n\n  setActualMinutes(updateMinutes);\n  setActualSeconds(updateSeconds);\n}; // General functions\n\n\nconst stop = () => {\n  if (status === 5) {\n    clearInterval(interv);\n    setStatus(6);\n  } else if (status === 7) {\n    clearInterval(interv);\n    setStatus(8);\n  } else if (status === 9) {\n    clearInterval(interv);\n    setStatus(10);\n  }\n};\n\nconst resume = () => {\n  if (status === 6) {\n    studyStart();\n    setStatus(5);\n  } else if (status === 8) {\n    shortBreakStart();\n    setStatus(7);\n  } else if (status === 10) {\n    longBreakStart();\n    setStatus(9);\n  }\n};\n\nconst backToStart = () => {\n  setSubCycleCount(0);\n  setMsg(\"Study Time\");\n  setActualMinutes(userStudyTime);\n  clearInterval(interv);\n\n  if (status === 4) {\n    setStatus(1);\n  }\n};\n\nconst skip = () => {\n  clearInterval(interv);\n\n  if (status === 5 || status === 6 && subCycleCount <= 3) {\n    setStatus(2);\n    setMsg(\"Short Break Time\");\n    setActualMinutes(userShortBreak);\n    setActualSeconds(0);\n  } else if (status === 7 || status === 8 || status === 6 && subCycleCount > 3) {\n    setStatus(3);\n    setMsg(\"Long Break Time\");\n    setActualMinutes(userLongBreak);\n    setActualSeconds(0);\n  }\n};\n\nexport { studyStart, studyRun, shortBreakStart, shortBreakRun, longBreakStart, longBreakRun, stop, resume, backToStart, skip };","map":{"version":3,"names":["status","studyStart","updateSubCycleCount","setSubCycleCount","updateCycleCount","setCycleCount","clearInterval","interv","actualMinutes","actualSeconds","alert","studyRun","setStatus","setInterv","setInterval","updateSeconds","updateMinutes","setActualMinutes","setActualSeconds","userShortBreak","setMsg","subCycleCount","userLongBreak","shortBreakStart","shortBreakRun","userStudyTime","longBreakStart","longBreakRun","stop","resume","backToStart","skip"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/TimerController.js"],"sourcesContent":["import status from './TimerFunctionality'\r\n\r\n//  Study Time functions\r\n\r\nconst studyStart = () => {\r\n  if (status === 1) {\r\n    updateSubCycleCount += 1;\r\n    setSubCycleCount(updateSubCycleCount);\r\n    if (updateSubCycleCount === 4) {\r\n      updateCycleCount += 1;\r\n      setCycleCount(updateCycleCount);\r\n    }\r\n  }\r\n  clearInterval(interv);\r\n  if (actualMinutes === 0 && actualSeconds === 0) {\r\n    alert(\"Set study time\");\r\n  } else {\r\n    studyRun();\r\n    setStatus(5);\r\n    setInterv(setInterval(studyRun, 5));\r\n  }\r\n};\r\n\r\nconst studyRun = () => {\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n      setActualMinutes(updateMinutes);\r\n      setActualSeconds(updateSeconds);\r\n    } else {\r\n      setActualMinutes(userShortBreak);\r\n      setMsg(\"Short Break Time\");\r\n      setStatus(2);\r\n    }\r\n    if (subCycleCount >= 3 && updateSeconds === 0 && updateMinutes === 0) {\r\n      setMsg(\"Long Break Time\");\r\n      setStatus(3);\r\n      clearInterval(interv);\r\n      setActualMinutes(userLongBreak);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n    setActualMinutes(updateMinutes);\r\n    setActualSeconds(updateSeconds);\r\n  }\r\n};\r\n\r\n//  Short Break functions\r\n\r\nconst shortBreakStart = () => {\r\n  clearInterval(interv);\r\n  setStatus(7);\r\n  shortBreakRun();\r\n  setInterv(setInterval(shortBreakRun, 5));\r\n};\r\n\r\nconst shortBreakRun = () => {\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n      setActualMinutes(updateMinutes);\r\n      setActualSeconds(updateSeconds);\r\n    } else {\r\n      setActualMinutes(userStudyTime);\r\n      setMsg(\"Study Time\");\r\n      setStatus(1);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n    setActualMinutes(updateMinutes);\r\n    setActualSeconds(updateSeconds);\r\n  }\r\n};\r\n\r\n// Long Break functions\r\n\r\nconst longBreakStart = () => {\r\n  clearInterval(interv);\r\n  setStatus(9);\r\n  longBreakRun();\r\n  setInterv(setInterval(longBreakRun, 5));\r\n};\r\n\r\nconst longBreakRun = () => {\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n    } else {\r\n      setStatus(4);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n  }\r\n  setActualMinutes(updateMinutes);\r\n  setActualSeconds(updateSeconds);\r\n};\r\n\r\n// General functions\r\n\r\nconst stop = () => {\r\n  if (status === 5) {\r\n    clearInterval(interv);\r\n    setStatus(6);\r\n  } else if (status === 7) {\r\n    clearInterval(interv);\r\n    setStatus(8);\r\n  } else if (status === 9) {\r\n    clearInterval(interv);\r\n    setStatus(10);\r\n  }\r\n};\r\n\r\nconst resume = () => {\r\n  if (status === 6) {\r\n    studyStart();\r\n    setStatus(5);\r\n  } else if (status === 8) {\r\n    shortBreakStart();\r\n    setStatus(7);\r\n  } else if (status === 10) {\r\n    longBreakStart();\r\n    setStatus(9);\r\n  }\r\n};\r\n\r\nconst backToStart = () => {\r\n  setSubCycleCount(0);\r\n  setMsg(\"Study Time\");\r\n  setActualMinutes(userStudyTime);\r\n  clearInterval(interv);\r\n  if (status === 4) {\r\n    setStatus(1);\r\n  }\r\n};\r\n\r\nconst skip = () => {\r\n  clearInterval(interv);\r\n  if (status === 5 || (status === 6 && subCycleCount <= 3)) {\r\n    setStatus(2);\r\n    setMsg(\"Short Break Time\");\r\n    setActualMinutes(userShortBreak);\r\n    setActualSeconds(0);\r\n  } else if (\r\n    status === 7 ||\r\n    status === 8 ||\r\n    (status === 6 && subCycleCount > 3)\r\n  ) {\r\n    setStatus(3);\r\n    setMsg(\"Long Break Time\");\r\n    setActualMinutes(userLongBreak);\r\n    setActualSeconds(0);\r\n  }\r\n};\r\n\r\nexport {\r\n  studyStart,\r\n  studyRun,\r\n  shortBreakStart,\r\n  shortBreakRun,\r\n  longBreakStart,\r\n  longBreakRun,\r\n  stop,\r\n  resume,\r\n  backToStart,\r\n  skip\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}