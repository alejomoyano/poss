{"ast":null,"code":"import Swal from \"sweetalert2\";\nlet studyTime;\nlet shortBreak;\nlet longBreak;\n\nconst configAlert = () => {\n  return new Promise(resolve => {\n    resolve(Swal.fire({\n      title: \"Timer Configuration\",\n      html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n                   <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n                   <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n      confirmButtonText: \"Confirm\",\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      focusConfirm: false,\n      preConfirm: () => {\n        const configStudyTime = Swal.getPopup().querySelector(\"#study-time\").value;\n        const configShortBreak = Swal.getPopup().querySelector(\"#short-break\").value;\n        const configLongBreak = Swal.getPopup().querySelector(\"#long-break\").value;\n\n        if (!configStudyTime || !configShortBreak || !configLongBreak) {\n          Swal.showValidationMessage(`Please configure the timer`);\n        }\n\n        return {\n          configStudyTime: configStudyTime,\n          configShortBreak: configShortBreak,\n          configLongBreak: configLongBreak\n        };\n      }\n    }).then(result => {\n      Swal.fire({\n        confirmButtonText: \"Ok\",\n        allowOutsideClick: false,\n        allowEscapeKey: false,\n        focusConfirm: false,\n        title: `Study Time: ${result.value.configStudyTime} minutes\n                        Short Break Time: ${result.value.configShortBreak} minutes\n                        Long Break Time: ${result.value.configLongBreak} minutes`.trim()\n      });\n      return {\n        studyTime: result.value.configStudyTime,\n        shortBreak: result.value.configShortBreak,\n        longBreak: result.value.configLongBreak\n      };\n    }));\n  });\n}; //     Swal.fire({\n//         title: \"Timer Configuration\",\n//         html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n//        <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n//        <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n//         confirmButtonText: \"Confirm\",\n//         allowOutsideClick: false,\n//         allowEscapeKey: false,\n//         focusConfirm: false,\n//         preConfirm: () => {\n//           const configStudyTime =\n//             Swal.getPopup().querySelector(\"#study-time\").value;\n//           const configShortBreak =\n//             Swal.getPopup().querySelector(\"#short-break\").value;\n//           const configLongBreak =\n//             Swal.getPopup().querySelector(\"#long-break\").value;\n//           if (!configStudyTime || !configShortBreak || !configLongBreak) {\n//             Swal.showValidationMessage(`Please configure the timer`);\n//           }\n//           return {\n//             configStudyTime: configStudyTime,\n//             configShortBreak: configShortBreak,\n//             configLongBreak: configLongBreak,\n//           };\n//         },\n//       }).then((result) => {\n//         Swal.fire({\n//           confirmButtonText: \"Ok\",\n//           allowOutsideClick: false,\n//           allowEscapeKey: false,\n//           focusConfirm: false,\n//           title: `Study Time: ${result.value.configStudyTime} minutes\n//             Short Break Time: ${result.value.configShortBreak} minutes\n//             Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\n//         });\n//         return {\n//             studyTime: result.value.configStudyTime,\n//             shortBreak: result.value.configShortBreak,\n//             longBreak: result.value.configLongBreak\n//         }\n//     });\n// }\n\n\nasync function asynCall() {\n  console.log('entrando');\n  const obj = await configAlert();\n  console.log('saliendo');\n}\n\nexport { configAlert, asynCall };","map":{"version":3,"names":["Swal","studyTime","shortBreak","longBreak","configAlert","Promise","resolve","fire","title","html","confirmButtonText","allowOutsideClick","allowEscapeKey","focusConfirm","preConfirm","configStudyTime","getPopup","querySelector","value","configShortBreak","configLongBreak","showValidationMessage","then","result","trim","asynCall","console","log","obj"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/ConfigAlert.js"],"sourcesContent":["import Swal from \"sweetalert2\";\r\n\r\nlet studyTime;\r\nlet shortBreak;\r\nlet longBreak;\r\n\r\nconst configAlert = () =>{\r\n    return new Promise(resolve =>{\r\n        resolve(    Swal.fire({\r\n                    title: \"Timer Configuration\",\r\n                    html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n                   <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n                   <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n                    confirmButtonText: \"Confirm\",\r\n                    allowOutsideClick: false,\r\n                    allowEscapeKey: false,\r\n                    focusConfirm: false,\r\n                    preConfirm: () => {\r\n                      const configStudyTime =\r\n                        Swal.getPopup().querySelector(\"#study-time\").value;\r\n                      const configShortBreak =\r\n                        Swal.getPopup().querySelector(\"#short-break\").value;\r\n                      const configLongBreak =\r\n                        Swal.getPopup().querySelector(\"#long-break\").value;\r\n                      if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n                        Swal.showValidationMessage(`Please configure the timer`);\r\n                      }\r\n                      return {\r\n                        configStudyTime: configStudyTime,\r\n                        configShortBreak: configShortBreak,\r\n                        configLongBreak: configLongBreak,\r\n                      };\r\n                    },\r\n                  }).then((result) => {\r\n                    Swal.fire({\r\n                      confirmButtonText: \"Ok\",\r\n                      allowOutsideClick: false,\r\n                      allowEscapeKey: false,\r\n                      focusConfirm: false,\r\n                      title: `Study Time: ${result.value.configStudyTime} minutes\r\n                        Short Break Time: ${result.value.configShortBreak} minutes\r\n                        Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n                    });\r\n                    return {\r\n                        studyTime: result.value.configStudyTime,\r\n                        shortBreak: result.value.configShortBreak,\r\n                        longBreak: result.value.configLongBreak\r\n                    }\r\n                }));\r\n    });\r\n}\r\n//     Swal.fire({\r\n//         title: \"Timer Configuration\",\r\n//         html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n//        <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n//        <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n//         confirmButtonText: \"Confirm\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//         focusConfirm: false,\r\n//         preConfirm: () => {\r\n//           const configStudyTime =\r\n//             Swal.getPopup().querySelector(\"#study-time\").value;\r\n//           const configShortBreak =\r\n//             Swal.getPopup().querySelector(\"#short-break\").value;\r\n//           const configLongBreak =\r\n//             Swal.getPopup().querySelector(\"#long-break\").value;\r\n//           if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n//             Swal.showValidationMessage(`Please configure the timer`);\r\n//           }\r\n//           return {\r\n//             configStudyTime: configStudyTime,\r\n//             configShortBreak: configShortBreak,\r\n//             configLongBreak: configLongBreak,\r\n//           };\r\n//         },\r\n//       }).then((result) => {\r\n//         Swal.fire({\r\n//           confirmButtonText: \"Ok\",\r\n//           allowOutsideClick: false,\r\n//           allowEscapeKey: false,\r\n//           focusConfirm: false,\r\n//           title: `Study Time: ${result.value.configStudyTime} minutes\r\n//             Short Break Time: ${result.value.configShortBreak} minutes\r\n//             Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n//         });\r\n//         return {\r\n//             studyTime: result.value.configStudyTime,\r\n//             shortBreak: result.value.configShortBreak,\r\n//             longBreak: result.value.configLongBreak\r\n//         }\r\n//     });\r\n// }\r\n\r\nasync function asynCall(){\r\n    console.log('entrando');\r\n    const obj = await configAlert();\r\n    console.log('saliendo');\r\n}\r\n\r\n\r\nexport {configAlert,asynCall};\r\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,IAAIC,SAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,SAAJ;;AAEA,MAAMC,WAAW,GAAG,MAAK;EACrB,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;IACzBA,OAAO,CAAKN,IAAI,CAACO,IAAL,CAAU;MACVC,KAAK,EAAE,qBADG;MAEVC,IAAI,EAAG;AAC3B;AACA,2HAJ8B;MAKVC,iBAAiB,EAAE,SALT;MAMVC,iBAAiB,EAAE,KANT;MAOVC,cAAc,EAAE,KAPN;MAQVC,YAAY,EAAE,KARJ;MASVC,UAAU,EAAE,MAAM;QAChB,MAAMC,eAAe,GACnBf,IAAI,CAACgB,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;QAEA,MAAMC,gBAAgB,GACpBnB,IAAI,CAACgB,QAAL,GAAgBC,aAAhB,CAA8B,cAA9B,EAA8CC,KADhD;QAEA,MAAME,eAAe,GACnBpB,IAAI,CAACgB,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;;QAEA,IAAI,CAACH,eAAD,IAAoB,CAACI,gBAArB,IAAyC,CAACC,eAA9C,EAA+D;UAC7DpB,IAAI,CAACqB,qBAAL,CAA4B,4BAA5B;QACD;;QACD,OAAO;UACLN,eAAe,EAAEA,eADZ;UAELI,gBAAgB,EAAEA,gBAFb;UAGLC,eAAe,EAAEA;QAHZ,CAAP;MAKD;IAxBS,CAAV,EAyBCE,IAzBD,CAyBOC,MAAD,IAAY;MAClBvB,IAAI,CAACO,IAAL,CAAU;QACRG,iBAAiB,EAAE,IADX;QAERC,iBAAiB,EAAE,KAFX;QAGRC,cAAc,EAAE,KAHR;QAIRC,YAAY,EAAE,KAJN;QAKRL,KAAK,EAAG,eAAce,MAAM,CAACL,KAAP,CAAaH,eAAgB;AACzE,4CAA4CQ,MAAM,CAACL,KAAP,CAAaC,gBAAiB;AAC1E,2CAA2CI,MAAM,CAACL,KAAP,CAAaE,eAAgB,UAF3C,CAEqDI,IAFrD;MALC,CAAV;MASA,OAAO;QACHvB,SAAS,EAAEsB,MAAM,CAACL,KAAP,CAAaH,eADrB;QAEHb,UAAU,EAAEqB,MAAM,CAACL,KAAP,CAAaC,gBAFtB;QAGHhB,SAAS,EAAEoB,MAAM,CAACL,KAAP,CAAaE;MAHrB,CAAP;IAKH,CAxCG,CAAL,CAAP;EAyCH,CA1CM,CAAP;AA2CH,CA5CD,C,CA6CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeK,QAAf,GAAyB;EACrBC,OAAO,CAACC,GAAR,CAAY,UAAZ;EACA,MAAMC,GAAG,GAAG,MAAMxB,WAAW,EAA7B;EACAsB,OAAO,CAACC,GAAR,CAAY,UAAZ;AACH;;AAGD,SAAQvB,WAAR,EAAoBqB,QAApB"},"metadata":{},"sourceType":"module"}