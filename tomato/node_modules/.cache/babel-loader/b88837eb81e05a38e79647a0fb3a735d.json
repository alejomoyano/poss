{"ast":null,"code":"var _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useSelector } from 'react-redux';\nimport { useDispatch } from 'react-redux';\nconst {\n  value: status\n} = useSelector(state => state.timer);\nconst [actualMinutes, setActualMinutes] = useState(0);\nconst [actualSeconds, setActualSeconds] = useState(0);\nconst [interv, setInterv] = useState(); //Variables para incrementar los ciclos y luego guardarlas en el estado generales.\n\nlet updateSubCycleCount = subCycleCount;\nlet updateCycleCount = cycleCount; //Variables que se decrementan como temporizadores, sirven para no modificar las introducidas por el usuario.\n\nlet updateMinutes = actualMinutes;\nlet updateSeconds = actualSeconds; //  Study Time functions\n\nconst studyStart = () => {\n  _s();\n\n  const dispatch = useDispatch();\n\n  if (status === 1) {\n    updateSubCycleCount += 1;\n    setSubCycleCount(updateSubCycleCount);\n\n    if (updateSubCycleCount === 4) {\n      updateCycleCount += 1;\n      setCycleCount(updateCycleCount);\n    }\n  }\n\n  clearInterval(interv);\n\n  if (actualMinutes === 0 && actualSeconds === 0) {\n    alert(\"Set study time\");\n  } else {\n    studyRun();\n    dispatch(setStatus(5)); //setStatus(5);\n\n    setInterv(setInterval(studyRun, 5));\n  }\n};\n\n_s(studyStart, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nconst studyRun = () => {\n  _s2();\n\n  const dispatch = useDispatch();\n\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n      setActualMinutes(updateMinutes);\n      setActualSeconds(updateSeconds);\n    } else {\n      setActualMinutes(userShortBreak);\n      setMsg(\"Short Break Time\");\n      dispatch(setStatus(2)); //setStatus(2);\n    }\n\n    if (subCycleCount >= 3 && updateSeconds === 0 && updateMinutes === 0) {\n      setMsg(\"Long Break Time\");\n      setStatus(3);\n      clearInterval(interv);\n      setActualMinutes(userLongBreak);\n    }\n  } else {\n    updateSeconds--;\n    setActualMinutes(updateMinutes);\n    setActualSeconds(updateSeconds);\n  }\n}; //  Short Break functions\n\n\n_s2(studyRun, \"rgTLoBID190wEKCp9+G8W6F7A5M=\", false, function () {\n  return [useDispatch];\n});\n\nconst shortBreakStart = () => {\n  clearInterval(interv);\n  setStatus(7);\n  shortBreakRun();\n  setInterv(setInterval(shortBreakRun, 5));\n};\n\nconst shortBreakRun = () => {\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n      setActualMinutes(updateMinutes);\n      setActualSeconds(updateSeconds);\n    } else {\n      setActualMinutes(userStudyTime);\n      setMsg(\"Study Time\");\n      setStatus(1);\n    }\n  } else {\n    updateSeconds--;\n    setActualMinutes(updateMinutes);\n    setActualSeconds(updateSeconds);\n  }\n}; // Long Break functions\n\n\nconst longBreakStart = () => {\n  clearInterval(interv);\n  setStatus(9);\n  longBreakRun();\n  setInterv(setInterval(longBreakRun, 5));\n};\n\nconst longBreakRun = () => {\n  if (updateSeconds === 0) {\n    if (updateMinutes !== 0) {\n      updateMinutes--;\n      updateSeconds = 59;\n    } else {\n      setStatus(4);\n    }\n  } else {\n    updateSeconds--;\n  }\n\n  setActualMinutes(updateMinutes);\n  setActualSeconds(updateSeconds);\n}; // General functions\n\n\nconst stop = () => {\n  if (status === 5) {\n    clearInterval(interv);\n    setStatus(6);\n  } else if (status === 7) {\n    clearInterval(interv);\n    setStatus(8);\n  } else if (status === 9) {\n    clearInterval(interv);\n    setStatus(10);\n  }\n};\n\nconst resume = () => {\n  if (status === 6) {\n    studyStart();\n    setStatus(5);\n  } else if (status === 8) {\n    shortBreakStart();\n    setStatus(7);\n  } else if (status === 10) {\n    longBreakStart();\n    setStatus(9);\n  }\n};\n\nconst backToStart = () => {\n  setSubCycleCount(0);\n  setMsg(\"Study Time\");\n  setActualMinutes(userStudyTime);\n  clearInterval(interv);\n\n  if (status === 4) {\n    setStatus(1);\n  }\n};\n\nconst skip = () => {\n  clearInterval(interv);\n\n  if (status === 5 || status === 6 && subCycleCount <= 3) {\n    setStatus(2);\n    setMsg(\"Short Break Time\");\n    setActualMinutes(userShortBreak);\n    setActualSeconds(0);\n  } else if (status === 7 || status === 8 || status === 6 && subCycleCount > 3) {\n    setStatus(3);\n    setMsg(\"Long Break Time\");\n    setActualMinutes(userLongBreak);\n    setActualSeconds(0);\n  }\n};\n\nexport { studyStart, studyRun, shortBreakStart, shortBreakRun, longBreakStart, longBreakRun, stop, resume, backToStart, skip };\nexport { actualMinutes, actualSeconds };","map":{"version":3,"names":["useSelector","useDispatch","value","status","state","timer","actualMinutes","setActualMinutes","useState","actualSeconds","setActualSeconds","interv","setInterv","updateSubCycleCount","subCycleCount","updateCycleCount","cycleCount","updateMinutes","updateSeconds","studyStart","dispatch","setSubCycleCount","setCycleCount","clearInterval","alert","studyRun","setStatus","setInterval","userShortBreak","setMsg","userLongBreak","shortBreakStart","shortBreakRun","userStudyTime","longBreakStart","longBreakRun","stop","resume","backToStart","skip"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/TimerController.js"],"sourcesContent":["import { useSelector } from 'react-redux'\r\nimport {useDispatch} from 'react-redux'\r\n\r\nconst {value: status} = useSelector(state => state.timer);\r\n\r\nconst [actualMinutes, setActualMinutes] = useState(0);\r\nconst [actualSeconds, setActualSeconds] = useState(0);\r\nconst [interv, setInterv] = useState();\r\n\r\n  //Variables para incrementar los ciclos y luego guardarlas en el estado generales.\r\n\r\n  let updateSubCycleCount = subCycleCount;\r\n  let updateCycleCount = cycleCount;\r\n\r\n  //Variables que se decrementan como temporizadores, sirven para no modificar las introducidas por el usuario.\r\n\r\n  let updateMinutes = actualMinutes;\r\n  let updateSeconds = actualSeconds;\r\n\r\n//  Study Time functions\r\n\r\nconst studyStart = () => {\r\n    const dispatch = useDispatch();\r\n  if (status === 1) {\r\n    updateSubCycleCount += 1;\r\n    setSubCycleCount(updateSubCycleCount);\r\n    if (updateSubCycleCount === 4) {\r\n      updateCycleCount += 1;\r\n      setCycleCount(updateCycleCount);\r\n    }\r\n  }\r\n  clearInterval(interv);\r\n  if (actualMinutes === 0 && actualSeconds === 0) {\r\n    alert(\"Set study time\");\r\n  } else {\r\n    studyRun();\r\n    dispatch(setStatus(5))\r\n    //setStatus(5);\r\n    setInterv(setInterval(studyRun, 5));\r\n  }\r\n};\r\n\r\nconst studyRun = () => {\r\n    const dispatch = useDispatch();\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n      setActualMinutes(updateMinutes);\r\n      setActualSeconds(updateSeconds);\r\n    } else {\r\n      setActualMinutes(userShortBreak);\r\n      setMsg(\"Short Break Time\");\r\n    dispatch(setStatus(2))\r\n    //setStatus(2);\r\n    }\r\n    if (subCycleCount >= 3 && updateSeconds === 0 && updateMinutes === 0) {\r\n      setMsg(\"Long Break Time\");\r\n      setStatus(3);\r\n      clearInterval(interv);\r\n      setActualMinutes(userLongBreak);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n    setActualMinutes(updateMinutes);\r\n    setActualSeconds(updateSeconds);\r\n  }\r\n};\r\n\r\n//  Short Break functions\r\n\r\nconst shortBreakStart = () => {\r\n  clearInterval(interv);\r\n  setStatus(7);\r\n  shortBreakRun();\r\n  setInterv(setInterval(shortBreakRun, 5));\r\n};\r\n\r\nconst shortBreakRun = () => {\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n      setActualMinutes(updateMinutes);\r\n      setActualSeconds(updateSeconds);\r\n    } else {\r\n      setActualMinutes(userStudyTime);\r\n      setMsg(\"Study Time\");\r\n      setStatus(1);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n    setActualMinutes(updateMinutes);\r\n    setActualSeconds(updateSeconds);\r\n  }\r\n};\r\n\r\n// Long Break functions\r\n\r\nconst longBreakStart = () => {\r\n  clearInterval(interv);\r\n  setStatus(9);\r\n  longBreakRun();\r\n  setInterv(setInterval(longBreakRun, 5));\r\n};\r\n\r\nconst longBreakRun = () => {\r\n  if (updateSeconds === 0) {\r\n    if (updateMinutes !== 0) {\r\n      updateMinutes--;\r\n      updateSeconds = 59;\r\n    } else {\r\n      setStatus(4);\r\n    }\r\n  } else {\r\n    updateSeconds--;\r\n  }\r\n  setActualMinutes(updateMinutes);\r\n  setActualSeconds(updateSeconds);\r\n};\r\n\r\n// General functions\r\n\r\nconst stop = () => {\r\n  if (status === 5) {\r\n    clearInterval(interv);\r\n    setStatus(6);\r\n  } else if (status === 7) {\r\n    clearInterval(interv);\r\n    setStatus(8);\r\n  } else if (status === 9) {\r\n    clearInterval(interv);\r\n    setStatus(10);\r\n  }\r\n};\r\n\r\nconst resume = () => {\r\n  if (status === 6) {\r\n    studyStart();\r\n    setStatus(5);\r\n  } else if (status === 8) {\r\n    shortBreakStart();\r\n    setStatus(7);\r\n  } else if (status === 10) {\r\n    longBreakStart();\r\n    setStatus(9);\r\n  }\r\n};\r\n\r\nconst backToStart = () => {\r\n  setSubCycleCount(0);\r\n  setMsg(\"Study Time\");\r\n  setActualMinutes(userStudyTime);\r\n  clearInterval(interv);\r\n  if (status === 4) {\r\n    setStatus(1);\r\n  }\r\n};\r\n\r\nconst skip = () => {\r\n  clearInterval(interv);\r\n  if (status === 5 || (status === 6 && subCycleCount <= 3)) {\r\n    setStatus(2);\r\n    setMsg(\"Short Break Time\");\r\n    setActualMinutes(userShortBreak);\r\n    setActualSeconds(0);\r\n  } else if (\r\n    status === 7 ||\r\n    status === 8 ||\r\n    (status === 6 && subCycleCount > 3)\r\n  ) {\r\n    setStatus(3);\r\n    setMsg(\"Long Break Time\");\r\n    setActualMinutes(userLongBreak);\r\n    setActualSeconds(0);\r\n  }\r\n};\r\n\r\nexport {\r\n  studyStart,\r\n  studyRun,\r\n  shortBreakStart,\r\n  shortBreakRun,\r\n  longBreakStart,\r\n  longBreakRun,\r\n  stop,\r\n  resume,\r\n  backToStart,\r\n  skip\r\n};\r\n\r\nexport {actualMinutes, actualSeconds}\r\n"],"mappings":";;;AAAA,SAASA,WAAT,QAA4B,aAA5B;AACA,SAAQC,WAAR,QAA0B,aAA1B;AAEA,MAAM;EAACC,KAAK,EAAEC;AAAR,IAAkBH,WAAW,CAACI,KAAK,IAAIA,KAAK,CAACC,KAAhB,CAAnC;AAEA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCC,QAAQ,CAAC,CAAD,CAAlD;AACA,MAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCF,QAAQ,CAAC,CAAD,CAAlD;AACA,MAAM,CAACG,MAAD,EAASC,SAAT,IAAsBJ,QAAQ,EAApC,C,CAEE;;AAEA,IAAIK,mBAAmB,GAAGC,aAA1B;AACA,IAAIC,gBAAgB,GAAGC,UAAvB,C,CAEA;;AAEA,IAAIC,aAAa,GAAGX,aAApB;AACA,IAAIY,aAAa,GAAGT,aAApB,C,CAEF;;AAEA,MAAMU,UAAU,GAAG,MAAM;EAAA;;EACrB,MAAMC,QAAQ,GAAGnB,WAAW,EAA5B;;EACF,IAAIE,MAAM,KAAK,CAAf,EAAkB;IAChBU,mBAAmB,IAAI,CAAvB;IACAQ,gBAAgB,CAACR,mBAAD,CAAhB;;IACA,IAAIA,mBAAmB,KAAK,CAA5B,EAA+B;MAC7BE,gBAAgB,IAAI,CAApB;MACAO,aAAa,CAACP,gBAAD,CAAb;IACD;EACF;;EACDQ,aAAa,CAACZ,MAAD,CAAb;;EACA,IAAIL,aAAa,KAAK,CAAlB,IAAuBG,aAAa,KAAK,CAA7C,EAAgD;IAC9Ce,KAAK,CAAC,gBAAD,CAAL;EACD,CAFD,MAEO;IACLC,QAAQ;IACRL,QAAQ,CAACM,SAAS,CAAC,CAAD,CAAV,CAAR,CAFK,CAGL;;IACAd,SAAS,CAACe,WAAW,CAACF,QAAD,EAAW,CAAX,CAAZ,CAAT;EACD;AACF,CAnBD;;GAAMN,U;UACelB,W;;;AAoBrB,MAAMwB,QAAQ,GAAG,MAAM;EAAA;;EACnB,MAAML,QAAQ,GAAGnB,WAAW,EAA5B;;EACF,IAAIiB,aAAa,KAAK,CAAtB,EAAyB;IACvB,IAAID,aAAa,KAAK,CAAtB,EAAyB;MACvBA,aAAa;MACbC,aAAa,GAAG,EAAhB;MACAX,gBAAgB,CAACU,aAAD,CAAhB;MACAP,gBAAgB,CAACQ,aAAD,CAAhB;IACD,CALD,MAKO;MACLX,gBAAgB,CAACqB,cAAD,CAAhB;MACAC,MAAM,CAAC,kBAAD,CAAN;MACFT,QAAQ,CAACM,SAAS,CAAC,CAAD,CAAV,CAAR,CAHO,CAIP;IACC;;IACD,IAAIZ,aAAa,IAAI,CAAjB,IAAsBI,aAAa,KAAK,CAAxC,IAA6CD,aAAa,KAAK,CAAnE,EAAsE;MACpEY,MAAM,CAAC,iBAAD,CAAN;MACAH,SAAS,CAAC,CAAD,CAAT;MACAH,aAAa,CAACZ,MAAD,CAAb;MACAJ,gBAAgB,CAACuB,aAAD,CAAhB;IACD;EACF,CAlBD,MAkBO;IACLZ,aAAa;IACbX,gBAAgB,CAACU,aAAD,CAAhB;IACAP,gBAAgB,CAACQ,aAAD,CAAhB;EACD;AACF,CAzBD,C,CA2BA;;;IA3BMO,Q;UACexB,W;;;AA4BrB,MAAM8B,eAAe,GAAG,MAAM;EAC5BR,aAAa,CAACZ,MAAD,CAAb;EACAe,SAAS,CAAC,CAAD,CAAT;EACAM,aAAa;EACbpB,SAAS,CAACe,WAAW,CAACK,aAAD,EAAgB,CAAhB,CAAZ,CAAT;AACD,CALD;;AAOA,MAAMA,aAAa,GAAG,MAAM;EAC1B,IAAId,aAAa,KAAK,CAAtB,EAAyB;IACvB,IAAID,aAAa,KAAK,CAAtB,EAAyB;MACvBA,aAAa;MACbC,aAAa,GAAG,EAAhB;MACAX,gBAAgB,CAACU,aAAD,CAAhB;MACAP,gBAAgB,CAACQ,aAAD,CAAhB;IACD,CALD,MAKO;MACLX,gBAAgB,CAAC0B,aAAD,CAAhB;MACAJ,MAAM,CAAC,YAAD,CAAN;MACAH,SAAS,CAAC,CAAD,CAAT;IACD;EACF,CAXD,MAWO;IACLR,aAAa;IACbX,gBAAgB,CAACU,aAAD,CAAhB;IACAP,gBAAgB,CAACQ,aAAD,CAAhB;EACD;AACF,CAjBD,C,CAmBA;;;AAEA,MAAMgB,cAAc,GAAG,MAAM;EAC3BX,aAAa,CAACZ,MAAD,CAAb;EACAe,SAAS,CAAC,CAAD,CAAT;EACAS,YAAY;EACZvB,SAAS,CAACe,WAAW,CAACQ,YAAD,EAAe,CAAf,CAAZ,CAAT;AACD,CALD;;AAOA,MAAMA,YAAY,GAAG,MAAM;EACzB,IAAIjB,aAAa,KAAK,CAAtB,EAAyB;IACvB,IAAID,aAAa,KAAK,CAAtB,EAAyB;MACvBA,aAAa;MACbC,aAAa,GAAG,EAAhB;IACD,CAHD,MAGO;MACLQ,SAAS,CAAC,CAAD,CAAT;IACD;EACF,CAPD,MAOO;IACLR,aAAa;EACd;;EACDX,gBAAgB,CAACU,aAAD,CAAhB;EACAP,gBAAgB,CAACQ,aAAD,CAAhB;AACD,CAbD,C,CAeA;;;AAEA,MAAMkB,IAAI,GAAG,MAAM;EACjB,IAAIjC,MAAM,KAAK,CAAf,EAAkB;IAChBoB,aAAa,CAACZ,MAAD,CAAb;IACAe,SAAS,CAAC,CAAD,CAAT;EACD,CAHD,MAGO,IAAIvB,MAAM,KAAK,CAAf,EAAkB;IACvBoB,aAAa,CAACZ,MAAD,CAAb;IACAe,SAAS,CAAC,CAAD,CAAT;EACD,CAHM,MAGA,IAAIvB,MAAM,KAAK,CAAf,EAAkB;IACvBoB,aAAa,CAACZ,MAAD,CAAb;IACAe,SAAS,CAAC,EAAD,CAAT;EACD;AACF,CAXD;;AAaA,MAAMW,MAAM,GAAG,MAAM;EACnB,IAAIlC,MAAM,KAAK,CAAf,EAAkB;IAChBgB,UAAU;IACVO,SAAS,CAAC,CAAD,CAAT;EACD,CAHD,MAGO,IAAIvB,MAAM,KAAK,CAAf,EAAkB;IACvB4B,eAAe;IACfL,SAAS,CAAC,CAAD,CAAT;EACD,CAHM,MAGA,IAAIvB,MAAM,KAAK,EAAf,EAAmB;IACxB+B,cAAc;IACdR,SAAS,CAAC,CAAD,CAAT;EACD;AACF,CAXD;;AAaA,MAAMY,WAAW,GAAG,MAAM;EACxBjB,gBAAgB,CAAC,CAAD,CAAhB;EACAQ,MAAM,CAAC,YAAD,CAAN;EACAtB,gBAAgB,CAAC0B,aAAD,CAAhB;EACAV,aAAa,CAACZ,MAAD,CAAb;;EACA,IAAIR,MAAM,KAAK,CAAf,EAAkB;IAChBuB,SAAS,CAAC,CAAD,CAAT;EACD;AACF,CARD;;AAUA,MAAMa,IAAI,GAAG,MAAM;EACjBhB,aAAa,CAACZ,MAAD,CAAb;;EACA,IAAIR,MAAM,KAAK,CAAX,IAAiBA,MAAM,KAAK,CAAX,IAAgBW,aAAa,IAAI,CAAtD,EAA0D;IACxDY,SAAS,CAAC,CAAD,CAAT;IACAG,MAAM,CAAC,kBAAD,CAAN;IACAtB,gBAAgB,CAACqB,cAAD,CAAhB;IACAlB,gBAAgB,CAAC,CAAD,CAAhB;EACD,CALD,MAKO,IACLP,MAAM,KAAK,CAAX,IACAA,MAAM,KAAK,CADX,IAECA,MAAM,KAAK,CAAX,IAAgBW,aAAa,GAAG,CAH5B,EAIL;IACAY,SAAS,CAAC,CAAD,CAAT;IACAG,MAAM,CAAC,iBAAD,CAAN;IACAtB,gBAAgB,CAACuB,aAAD,CAAhB;IACApB,gBAAgB,CAAC,CAAD,CAAhB;EACD;AACF,CAjBD;;AAmBA,SACES,UADF,EAEEM,QAFF,EAGEM,eAHF,EAIEC,aAJF,EAKEE,cALF,EAMEC,YANF,EAOEC,IAPF,EAQEC,MARF,EASEC,WATF,EAUEC,IAVF;AAaA,SAAQjC,aAAR,EAAuBG,aAAvB"},"metadata":{},"sourceType":"module"}