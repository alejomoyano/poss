{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { getApp } from \"firebase/app\";\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\nimport { StudyStart } from \"../../components/Timer/TimerController\";\nconst initialState = {\n  values: {\n    times: {},\n    status: 0,\n    subCycle: 0,\n    cycle: 0,\n    minutes: 0,\n    seconds: 0,\n    msg: \"Set the timers to start\"\n  },\n  error: null\n};\nexport const timerSlice = createSlice({\n  name: \"timer\",\n  initialState,\n  reducers: {\n    StudyStart: (state, action) => {\n      if (state.values.status === 1) {\n        incrementSubCycle(); //updateSubCycleCount += 1;\n        //setSubCycleCount(updateSubCycleCount);\n\n        if (state.values.subCycle === 4) {\n          incrementCycle(); //updateCycleCount += 1;\n          //setCycleCount(updateCycleCount);\n        }\n      }\n\n      clearInterval();\n\n      if (state.values.minutes === 0 && state.values.seconds === 0) {\n        alert(\"Set study time\");\n      } else {\n        StudyRun();\n        setStatus(5); //setStatus(5);\n\n        setInterval(StudyRun(), 5);\n      }\n    },\n    StudyRun: _s((state, action) => {\n      _s();\n\n      const dispatch = useDispatch();\n      const {\n        values: {\n          seconds,\n          minutes,\n          times: {\n            studyTime,\n            shortBreak,\n            longBreak\n          },\n          subCycle\n        }\n      } = useSelector(state => state.timer);\n\n      if (seconds === 0) {\n        if (minutes !== 0) {\n          dispatch(decrementMinutes()); //updateMinutes--;\n\n          dispatch(setSeconds(59)); //updateSeconds = 59;\n          //setActualMinutes(updateMinutes);\n          //setActualSeconds(updateSeconds);\n        } else {\n          dispatch(setMinutes(shortBreak)); //setActualMinutes(userShortBreak);\n\n          dispatch(setMsg(\"Short Break Time\")); //setMsg(\"Short Break Time\");\n\n          dispatch(setStatus(2)); //setStatus(2);\n        }\n\n        if (subCycle >= 3 && seconds === 0 && minutes === 0) {\n          dispatch(setMsg(\"Long Break Time\")); //setMsg(\"Long Break Time\");\n\n          dispatch(setStatus(3)); //setStatus(3);\n\n          clearInterval();\n          dispatch(setMinutes(longBreak)); //setActualMinutes(userLongBreak);\n        }\n      } else {\n        //updateSeconds--;\n        dispatch(decrementSeconds()); //setActualMinutes(updateMinutes);\n        //setActualSeconds(updateSeconds);\n      }\n    }, \"4YvzHnTNMcpIpdireDAX3uXOhts=\", true, function () {\n      return [useDispatch];\n    }),\n    setTimes: (state, action) => {\n      console.log(\"Entre a SETTIMES reducer\");\n      state.values.times = action.payload;\n    },\n    setStatus: (state, action) => {\n      console.log('entrando STATUS ' + state.values.status);\n      state.values.status = action.payload;\n      console.log('STATUS ' + state.values.status);\n    },\n    incrementSubCycle: state => {\n      state.values.subCycle++;\n    },\n    incrementCycle: state => {\n      state.values.cycle++;\n    },\n    resetSubCycle: state => {\n      state.values.subCycle = 0;\n    },\n    setMsg: (state, action) => {\n      state.values.msg = action.payload;\n    },\n    decrementMinutes: state => {\n      state.values.minutes--;\n    },\n    setMinutes: (state, action) => {\n      state.values.minutes = action.payload;\n    },\n    decrementSeconds: state => {\n      state.values.seconds--;\n    },\n    setSeconds: (state, action) => {\n      state.values.seconds = action.payload;\n    }\n  }\n});\nexport const {\n  setTimes,\n  setStatus,\n  incrementCycle,\n  incrementSubCycle,\n  resetSubCycle,\n  setMsg,\n  decrementMinutes,\n  setMinutes,\n  decrementSeconds,\n  setSeconds\n} = timerSlice.actions;\nexport default timerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","useDispatch","getApp","getFirestore","collection","onSnapshot","StudyStart","initialState","values","times","status","subCycle","cycle","minutes","seconds","msg","error","timerSlice","name","reducers","state","action","incrementSubCycle","incrementCycle","clearInterval","alert","StudyRun","setStatus","setInterval","dispatch","studyTime","shortBreak","longBreak","useSelector","timer","decrementMinutes","setSeconds","setMinutes","setMsg","decrementSeconds","setTimes","console","log","payload","resetSubCycle","actions","reducer"],"sources":["C:/Users/Bruno/github/poss/tomato/src/redux/slices/timer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getApp } from \"firebase/app\";\r\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\r\nimport { StudyStart } from \"../../components/Timer/TimerController\";\r\n\r\nconst initialState = {\r\n  values: {\r\n    times: {},\r\n    status: 0,\r\n    subCycle: 0,\r\n    cycle: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n    msg: \"Set the timers to start\",\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const timerSlice = createSlice({\r\n  name: \"timer\",\r\n  initialState,\r\n  reducers: {\r\n      \r\nStudyStart: (state, action) => {\r\n\r\n  if (state.values.status === 1) {\r\n    incrementSubCycle();\r\n    //updateSubCycleCount += 1;\r\n    //setSubCycleCount(updateSubCycleCount);\r\n    if (state.values.subCycle === 4) {\r\n      incrementCycle();\r\n      //updateCycleCount += 1;\r\n      //setCycleCount(updateCycleCount);\r\n    }\r\n  }\r\n  clearInterval();\r\n  if (state.values.minutes === 0 && state.values.seconds === 0) {\r\n    alert(\"Set study time\");\r\n  } else {\r\n    StudyRun();\r\n    setStatus(5);\r\n    //setStatus(5);\r\n    setInterval(StudyRun(), 5);\r\n  }\r\n},\r\n\r\n\r\nStudyRun: (state, action) => {\r\n  const dispatch = useDispatch();\r\n  const {\r\n    values: {\r\n      seconds,\r\n      minutes,\r\n      times: { studyTime, shortBreak, longBreak },\r\n      subCycle,\r\n    },\r\n  } = useSelector((state) => state.timer);\r\n\r\n  if (seconds === 0) {\r\n    if (minutes !== 0) {\r\n      dispatch(decrementMinutes());\r\n      //updateMinutes--;\r\n      dispatch(setSeconds(59));\r\n      //updateSeconds = 59;\r\n      //setActualMinutes(updateMinutes);\r\n      //setActualSeconds(updateSeconds);\r\n    } else {\r\n      dispatch(setMinutes(shortBreak));\r\n      //setActualMinutes(userShortBreak);\r\n      dispatch(setMsg(\"Short Break Time\"));\r\n      //setMsg(\"Short Break Time\");\r\n      dispatch(setStatus(2));\r\n      //setStatus(2);\r\n    }\r\n    if (subCycle >= 3 && seconds === 0 && minutes === 0) {\r\n      dispatch(setMsg(\"Long Break Time\"));\r\n      //setMsg(\"Long Break Time\");\r\n      dispatch(setStatus(3));\r\n      //setStatus(3);\r\n      clearInterval();\r\n      dispatch(setMinutes(longBreak));\r\n      //setActualMinutes(userLongBreak);\r\n    }\r\n  } else {\r\n    //updateSeconds--;\r\n    dispatch(decrementSeconds());\r\n    //setActualMinutes(updateMinutes);\r\n    //setActualSeconds(updateSeconds);\r\n  }\r\n},\r\n\r\n\r\n\r\n\r\n\r\n    setTimes: (state, action) => {\r\n      console.log(\"Entre a SETTIMES reducer\");\r\n      state.values.times = action.payload;\r\n    },\r\n    setStatus: (state, action) => {\r\n      console.log('entrando STATUS ' + state.values.status);\r\n      state.values.status = action.payload;\r\n      console.log('STATUS ' + state.values.status)\r\n    },\r\n    incrementSubCycle: (state) => {\r\n      state.values.subCycle++;\r\n    },\r\n    incrementCycle: (state) => {\r\n      state.values.cycle++;\r\n    },\r\n    resetSubCycle: (state) => {\r\n      state.values.subCycle = 0;\r\n    },\r\n    setMsg: (state, action) => {\r\n      state.values.msg = action.payload;\r\n    },\r\n    decrementMinutes: (state) =>{\r\n        state.values.minutes--;\r\n    },\r\n    setMinutes: (state, action) =>{\r\n        state.values.minutes = action.payload;\r\n    },\r\n    decrementSeconds: (state) =>{\r\n        state.values.seconds--;\r\n    },\r\n    setSeconds: (state, action) => {\r\n        state.values.seconds = action.payload;\r\n    } \r\n  },\r\n});\r\n\r\nexport const {\r\n  setTimes,\r\n  setStatus,\r\n  incrementCycle,\r\n  incrementSubCycle,\r\n  resetSubCycle,\r\n  setMsg,\r\n  decrementMinutes,\r\n  setMinutes,\r\n  decrementSeconds,\r\n  setSeconds\r\n} = timerSlice.actions;\r\nexport default timerSlice.reducer;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}