{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { useDispatch } from \"react-redux\";\nimport { getApp } from \"firebase/app\";\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\nconst initialState = {\n  values: {\n    times: {},\n    status: 0,\n    subCycle: 0,\n    cycle: 0,\n    msg: \"Set the timers to start\"\n  },\n  error: null\n};\nexport const timerSlice = createSlice({\n  name: \"timer\",\n  initialState,\n  reducers: {\n    setTimes: (state, action) => {\n      console.log(\"entre\");\n      state.values.times = action.payload;\n    },\n    setStatus: (state, action) => {\n      state.values.status = action.payload;\n    },\n    incrementSubCycle: state => {\n      state.values.subCycle++;\n    },\n    incrementCycle: state => {\n      state.values.cycle++;\n    },\n    resetSubCycle: state => {\n      state.values.subCycle = 0;\n    },\n    setMsg: (state, action) => {\n      state.values.msg = action.payload;\n    }\n  }\n});\nexport const {\n  setTimes,\n  setStatus,\n  incrementCycle,\n  incrementSubCycle,\n  resetSubCycle,\n  setMsg\n} = timerSlice.actions;\nexport default timerSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","useDispatch","getApp","getFirestore","collection","onSnapshot","initialState","values","times","status","subCycle","cycle","msg","error","timerSlice","name","reducers","setTimes","state","action","console","log","payload","setStatus","incrementSubCycle","incrementCycle","resetSubCycle","setMsg","actions","reducer"],"sources":["C:/Users/Bruno/github/poss/tomato/src/redux/slices/timer.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { getApp } from \"firebase/app\";\r\nimport { getFirestore, collection, onSnapshot } from \"firebase/firestore\";\r\n\r\nconst initialState = {\r\n  values: {\r\n    times: {},\r\n    status: 0,\r\n    subCycle: 0,\r\n    cycle: 0,\r\n    msg: \"Set the timers to start\",\r\n  },\r\n  error: null,\r\n};\r\n\r\nexport const timerSlice = createSlice({\r\n  name: \"timer\",\r\n  initialState,\r\n  reducers: {\r\n    setTimes: (state, action) => {\r\n      console.log(\"entre\");\r\n      state.values.times = action.payload;\r\n    },\r\n    setStatus: (state, action) => {\r\n      state.values.status = action.payload;\r\n    },\r\n    incrementSubCycle: (state) => {\r\n      state.values.subCycle++;\r\n    },\r\n    incrementCycle: (state) => {\r\n      state.values.cycle++;\r\n    },\r\n    resetSubCycle: (state) => {\r\n      state.values.subCycle = 0;\r\n    },\r\n    setMsg: (state, action) => {\r\n      state.values.msg = action.payload;\r\n    },\r\n  },\r\n});\r\n\r\nexport const {\r\n  setTimes,\r\n  setStatus,\r\n  incrementCycle,\r\n  incrementSubCycle,\r\n  resetSubCycle,\r\n  setMsg,\r\n} = timerSlice.actions;\r\nexport default timerSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,gBAAtB,QAA8C,kBAA9C;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,MAAT,QAAuB,cAAvB;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,UAAnC,QAAqD,oBAArD;AAEA,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE;IACNC,KAAK,EAAE,EADD;IAENC,MAAM,EAAE,CAFF;IAGNC,QAAQ,EAAE,CAHJ;IAINC,KAAK,EAAE,CAJD;IAKNC,GAAG,EAAE;EALC,CADW;EAQnBC,KAAK,EAAE;AARY,CAArB;AAWA,OAAO,MAAMC,UAAU,GAAGf,WAAW,CAAC;EACpCgB,IAAI,EAAE,OAD8B;EAEpCT,YAFoC;EAGpCU,QAAQ,EAAE;IACRC,QAAQ,EAAE,CAACC,KAAD,EAAQC,MAAR,KAAmB;MAC3BC,OAAO,CAACC,GAAR,CAAY,OAAZ;MACAH,KAAK,CAACX,MAAN,CAAaC,KAAb,GAAqBW,MAAM,CAACG,OAA5B;IACD,CAJO;IAKRC,SAAS,EAAE,CAACL,KAAD,EAAQC,MAAR,KAAmB;MAC5BD,KAAK,CAACX,MAAN,CAAaE,MAAb,GAAsBU,MAAM,CAACG,OAA7B;IACD,CAPO;IAQRE,iBAAiB,EAAGN,KAAD,IAAW;MAC5BA,KAAK,CAACX,MAAN,CAAaG,QAAb;IACD,CAVO;IAWRe,cAAc,EAAGP,KAAD,IAAW;MACzBA,KAAK,CAACX,MAAN,CAAaI,KAAb;IACD,CAbO;IAcRe,aAAa,EAAGR,KAAD,IAAW;MACxBA,KAAK,CAACX,MAAN,CAAaG,QAAb,GAAwB,CAAxB;IACD,CAhBO;IAiBRiB,MAAM,EAAE,CAACT,KAAD,EAAQC,MAAR,KAAmB;MACzBD,KAAK,CAACX,MAAN,CAAaK,GAAb,GAAmBO,MAAM,CAACG,OAA1B;IACD;EAnBO;AAH0B,CAAD,CAA9B;AA0BP,OAAO,MAAM;EACXL,QADW;EAEXM,SAFW;EAGXE,cAHW;EAIXD,iBAJW;EAKXE,aALW;EAMXC;AANW,IAOTb,UAAU,CAACc,OAPR;AAQP,eAAed,UAAU,CAACe,OAA1B"},"metadata":{},"sourceType":"module"}