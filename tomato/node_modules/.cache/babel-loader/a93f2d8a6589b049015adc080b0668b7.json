{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\Bruno\\\\github\\\\poss\\\\tomato\\\\src\\\\components\\\\Timer\\\\TimerFunctionality.js\";\nimport React, { useState } from 'react';\nimport TimerView from './TimerView';\nimport Buttons from './Buttons';\nimport Message from './Message';\nimport swal from 'sweetalert';\n\nfunction TimerFunctionality() {\n  var initialMinutes = 0;\n  var initialSeconds = 0;\n  var breakMinutes = 0;\n  var breakSeconds = 0;\n  var breakMsg = 'Break Time';\n  var studyMsg = 'Study Time';\n  var configMsg = 'Study Timer Configuration';\n  var configBreakMsg = 'Break Timer Configuration';\n  var welcomeMsg = 'Pomodoro Study Sesion';\n\n  var _useState = useState(initialMinutes),\n      _useState2 = _slicedToArray(_useState, 2),\n      minutes = _useState2[0],\n      setMinutes = _useState2[1];\n\n  var _useState3 = useState(initialSeconds),\n      _useState4 = _slicedToArray(_useState3, 2),\n      seconds = _useState4[0],\n      setSeconds = _useState4[1];\n\n  var _useState5 = useState(breakMinutes),\n      _useState6 = _slicedToArray(_useState5, 2),\n      breakMin = _useState6[0],\n      setBreakMinutes = _useState6[1];\n\n  var _useState7 = useState(breakSeconds),\n      _useState8 = _slicedToArray(_useState7, 2),\n      breakSec = _useState8[0],\n      setBreakSeconds = _useState8[1];\n\n  var _useState9 = useState(welcomeMsg),\n      _useState10 = _slicedToArray(_useState9, 2),\n      msg = _useState10[0],\n      setMsg = _useState10[1];\n\n  var _useState11 = useState(),\n      _useState12 = _slicedToArray(_useState11, 2),\n      interv = _useState12[0],\n      setInterv = _useState12[1];\n\n  var _useState13 = useState(0),\n      _useState14 = _slicedToArray(_useState13, 2),\n      status = _useState14[0],\n      setStatus = _useState14[1];\n  /*\r\n  --------------------- EXPLICACIÓN DE ESTADOS (STATUS), LO QUE SE MUESTRA Y FUNCIONALIDADES --------------------- \r\n  Están de forma desordenada dado que a medida que avanzaba en el programa tuve que ir agregando\r\n  funcionalidades dependiendo las vistas y las acciones que se tomen.\r\n      NOT STARTED = 0\r\n        Muestra solo el botón de Configuraciónes y el Start.\r\n    STARTED = 1\r\n        Muestra el STOP, RESET y Go to Break, acá para ir al Break es necesario\r\n        pausar el timer (STOP) para que no se corrompa el Timer. Esto lanza una alerta\r\n        si se intenta ir al Break sin haberlo pausado.\r\n    STOPPED = 2\r\n        Cuando se pulsa STOP y se pausa el Timer, se pasa a este estado 2 donde se muestran\r\n        los botones de RESUME, RESET y Go to Break como el anterior, pero ahora si permite\r\n        cambiar a Break Time.\r\n      BREAK = 3 (ELIMINADO)\r\n        Si pulsamos Go to Break, pasamos al estado 3 y nos aparece el botón SET BREAK, este\r\n        setea el contador en el tiempo de descanso predeterminado (esto hay que cambiarlo cuando\r\n        el tiempo sea configurable). (ELIMINADO)\r\n      BACK TO STUDY = 6\r\n        Al setear el timer en Break, nos aparece el START y el BACK TO STUDY. Si iniciamos\r\n        arranca el Timer, si clickeamos BACK TO STUDY nos lleva al inicio del Timer.\r\n    STOP y BACK TO STUDY = 7\r\n        Al arrancar el timer, nos aparece los botones para detenerlo (STOP) y para volver\r\n        al inicio (BACK TO STUDY), este último solo se acciona cuando esta en STOP el Timer.\r\n    STOP y BACK TO STUDY = 8\r\n        Al parar el timer (STOP) en el Break Time, podemos seguir con el tiempo (RESUME) o\r\n        podemos volver al inicio con el BACK TO STUDY, que al estar STOP el timer, te lo permite.\r\n    CONFIG STUDY = 5\r\n        Si clickeamos el engranaje de configuración, nos aparecen los botones para sumar 5 minutos (+),\r\n        substraer 5 minutos (-) y guardar y volver con ese valor modificado (SAVE).\r\n    BACK TO STUDY FINAL = 4\r\n          Cuando termina el break, aparece el botón BACK TO STUDY para volver al inicio\r\n    CONFIG BREAK = 9\r\n          Cuando clickeamos el engranaje para configurar el Study Time y guardamos (SAVE), nos lleva a la\r\n          pantalla de configuración del Break Time con los mismos botones pero referenciado a las variables\r\n          correspondientes a Break.\r\n    */\n\n\n  var updateStudyMin = minutes,\n      updateStudySecs = seconds;\n\n  var start = function start() {\n    if (minutes === 0 && seconds === 0) {\n      swal({\n        title: '¡Cuidado!',\n        text: 'Debe configurar el Timer antes de comenzar.',\n        icon: 'warning',\n        className: 'swal-css',\n        button: 'Ok',\n        closeOnClickOutside: false\n      });\n    } else {\n      run();\n      setStatus(1);\n      setInterv(setInterval(run, 1000));\n    }\n  };\n\n  var run = function run() {\n    if (updateStudySecs === 0) {\n      if (updateStudyMin !== 0) {\n        updateStudySecs = 59;\n        updateStudyMin--;\n      } else {\n        setStatus(3);\n      }\n    } else {\n      updateStudySecs--;\n    }\n\n    setMinutes(updateStudyMin);\n    setSeconds(updateStudySecs);\n  };\n\n  var stop = function stop() {\n    clearInterval(interv);\n    setStatus(2);\n  };\n\n  var reset = function reset() {\n    if (status === 2 || status === 1) {\n      stop();\n      swal({\n        title: '¡Cuidado!',\n        text: 'Esta acción reiniciará los valores y volverá al inicio.',\n        icon: 'warning',\n        buttons: ['Seguir aquí', 'Si']\n      }).then(function (resultado) {\n        if (resultado) {\n          clearInterval(interv);\n          setStatus(0);\n          setMinutes(initialMinutes);\n          setSeconds(initialSeconds);\n          setBreakMinutes(breakMinutes);\n          setBreakSeconds(breakSeconds);\n          setMsg(welcomeMsg);\n        }\n      });\n    } else {\n      clearInterval(interv);\n      setStatus(0);\n      setMinutes(initialMinutes);\n      setSeconds(initialSeconds);\n      setBreakMinutes(breakMinutes);\n      setBreakSeconds(breakSeconds);\n      setMsg(welcomeMsg);\n    }\n  };\n\n  var resume = function resume() {\n    return start();\n  }; //      ----------------------------------------- BREAK FUNCTIONALITY´S -----------------------------------------\n\n\n  var updateBreakMin = breakMin,\n      updateBreakSecs = breakSec;\n\n  var runBreak = function runBreak() {\n    if (updateBreakSecs === 0) {\n      if (updateBreakMin !== 0) {\n        updateBreakSecs = 59;\n        updateBreakMin--;\n      } else {\n        setStatus(4);\n      }\n    } else {\n      updateBreakSecs--;\n    }\n\n    setBreakMinutes(updateBreakMin);\n    setBreakSeconds(updateBreakSecs);\n  };\n\n  var breakRun = function breakRun() {\n    setInterv(setInterval(runBreak, 1000));\n    setStatus(7);\n\n    if (updateBreakSecs === 0) {\n      if (updateBreakMin !== 0) {\n        updateBreakSecs = 59;\n        updateBreakMin--;\n      }\n    } else {\n      updateBreakSecs--;\n    }\n\n    setBreakMinutes(updateBreakMin);\n    setBreakSeconds(updateBreakSecs);\n  };\n\n  var stopBreak = function stopBreak() {\n    clearInterval(interv);\n    setStatus(8);\n  };\n\n  var resumeBreak = function resumeBreak() {\n    run();\n    setStatus(7);\n    setInterv(setInterval(runBreak, 1000));\n  };\n\n  var goToBreak = function goToBreak() {\n    if (status !== 2) {\n      swal({\n        text: 'Debe parar el timer para realizar esta acción.',\n        icon: 'warning',\n        button: 'Ok'\n      });\n    } else {\n      setMsg(breakMsg);\n      setMinutes(initialMinutes);\n      setSeconds(initialSeconds);\n      setStatus(6);\n    }\n  }; //      ----------------------------------------- CONFIG BREAK TIMER -----------------------------------------  \n\n\n  var configBreakTimer = function configBreakTimer() {\n    if (status === 9) {\n      setStatus(0);\n    }\n  };\n\n  var addBreak = function addBreak() {\n    if (breakMin >= 0 && breakMin < 60) {\n      setBreakMinutes(breakMin + 5);\n    } else {\n      swal({\n        title: 'Límite de tiempo de ciclo alcanzado.',\n        text: 'El tiempo máximo para un ciclo de descanso es de 60 minutos.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    }\n  };\n\n  var subBreak = function subBreak() {\n    if (breakMin > 0) {\n      setBreakMinutes(breakMin - 5);\n    } else {\n      swal({\n        title: '¡Cuidado!',\n        text: 'No puede configurar tiempos negativos para el ciclo de descanso.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    }\n  };\n\n  var backFromConfig = function backFromConfig() {\n    if (breakMin === 0) {\n      swal({\n        text: 'Debe configurar el tiempo para el ciclo de descanso.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    } else {\n      setMsg(studyMsg);\n      setStatus(0);\n      swal({\n        text: 'Su ciclo de descanso fue configurado en: ' + breakMin + ' minutos.',\n        icon: 'success',\n        button: 'Ok'\n      });\n    }\n  }; //      ----------------------------------------- CONFIG STUDY TIMER -----------------------------------------  \n\n\n  var backToStudy = function backToStudy() {\n    if (status === 7) {\n      swal({\n        text: 'Debe parar el timer para realizar esta acción.',\n        icon: 'warning',\n        button: 'Ok'\n      });\n    } else {\n      swal({\n        title: '¿Seguro de continuar?',\n        text: 'Volverá al inicio',\n        icon: 'info',\n        buttons: ['Seguir aquí', 'Si']\n      }).then(function (respuesta) {\n        if (respuesta) {\n          clearInterval(interv);\n          setBreakMinutes(breakMinutes);\n          setBreakSeconds(breakSeconds);\n          setMsg(studyMsg);\n          reset();\n        }\n      });\n    }\n  };\n\n  var goToConfigBreak = function goToConfigBreak() {\n    if (minutes === 0) {\n      swal({\n        text: 'Debe configurar el tiempo para el ciclo de estudio.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    } else {\n      setMsg(configBreakMsg);\n      setStatus(9);\n      swal({\n        text: 'Su ciclo de estudio fue configurado en: ' + minutes + ' minutos.',\n        icon: 'success',\n        button: 'Ok'\n      });\n    }\n  };\n\n  var configTimer = function configTimer() {\n    setStatus(5);\n    setMsg(configMsg);\n\n    if (status === 5) {\n      setStatus(0);\n    }\n  };\n\n  var addTimer = function addTimer() {\n    if (minutes >= 0 && minutes < 60) {\n      setMinutes(minutes + 5);\n    } else {\n      swal({\n        title: 'Límite de tiempo de ciclo alcanzado.',\n        text: 'El tiempo máximo para un ciclo de estudio es 60 minutos.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    }\n  };\n\n  var subTimer = function subTimer() {\n    if (minutes > 0) {\n      setMinutes(minutes - 5);\n    } else {\n      swal({\n        title: '¡Cuidado!',\n        text: 'No puede configurar tiempos negativos para el ciclo de estudio.',\n        icon: 'error',\n        button: 'Ok'\n      });\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"TimerFunctionality\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Message, {\n    msg: msg,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 342,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(TimerView, {\n    minutes: minutes,\n    seconds: seconds,\n    breakMin: breakMin,\n    breakSec: breakSec,\n    status: status,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 343,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Buttons, {\n    status: status,\n    stop: stop,\n    reset: reset,\n    resume: resume,\n    start: start,\n    breakRun: breakRun,\n    goToBreak: goToBreak,\n    backToStudy: backToStudy,\n    configTimer: configTimer,\n    addTimer: addTimer,\n    subTimer: subTimer,\n    goToConfigBreak: goToConfigBreak,\n    stopBreak: stopBreak,\n    resumeBreak: resumeBreak,\n    configBreakTimer: configBreakTimer,\n    addBreak: addBreak,\n    subBreak: subBreak,\n    backFromConfig: backFromConfig,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 344,\n      columnNumber: 11\n    }\n  }));\n}\n\nexport default TimerFunctionality;","map":{"version":3,"names":["React","useState","TimerView","Buttons","Message","swal","TimerFunctionality","initialMinutes","initialSeconds","breakMinutes","breakSeconds","breakMsg","studyMsg","configMsg","configBreakMsg","welcomeMsg","minutes","setMinutes","seconds","setSeconds","breakMin","setBreakMinutes","breakSec","setBreakSeconds","msg","setMsg","interv","setInterv","status","setStatus","updateStudyMin","updateStudySecs","start","title","text","icon","className","button","closeOnClickOutside","run","setInterval","stop","clearInterval","reset","buttons","then","resultado","resume","updateBreakMin","updateBreakSecs","runBreak","breakRun","stopBreak","resumeBreak","goToBreak","configBreakTimer","addBreak","subBreak","backFromConfig","backToStudy","respuesta","goToConfigBreak","configTimer","addTimer","subTimer"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/TimerFunctionality.js"],"sourcesContent":["import React, {useState} from 'react'\r\nimport TimerView from './TimerView'\r\nimport Buttons from './Buttons'\r\nimport Message from './Message'\r\nimport swal from 'sweetalert'\r\n\r\nfunction TimerFunctionality() {\r\n\r\n    const initialMinutes = 0;\r\n    const initialSeconds = 0;\r\n    const breakMinutes = 0;\r\n    const breakSeconds = 0;\r\n    let breakMsg = 'Break Time';\r\n    let studyMsg = 'Study Time';\r\n    let configMsg = 'Study Timer Configuration'\r\n    let configBreakMsg = 'Break Timer Configuration'\r\n    let welcomeMsg = 'Pomodoro Study Sesion'\r\n  \r\n    const [minutes, setMinutes] = useState(initialMinutes);\r\n    const [seconds, setSeconds] = useState(initialSeconds);\r\n    const [breakMin, setBreakMinutes] = useState(breakMinutes);\r\n    const [breakSec, setBreakSeconds] = useState(breakSeconds);\r\n    const [msg, setMsg] = useState(welcomeMsg);\r\n    const [interv, setInterv] = useState();\r\n    const [status, setStatus] = useState(0);\r\n\r\n    /*\r\n    --------------------- EXPLICACIÓN DE ESTADOS (STATUS), LO QUE SE MUESTRA Y FUNCIONALIDADES --------------------- \r\n    Están de forma desordenada dado que a medida que avanzaba en el programa tuve que ir agregando\r\n    funcionalidades dependiendo las vistas y las acciones que se tomen.\r\n\r\n      NOT STARTED = 0\r\n          Muestra solo el botón de Configuraciónes y el Start.\r\n      STARTED = 1\r\n          Muestra el STOP, RESET y Go to Break, acá para ir al Break es necesario\r\n          pausar el timer (STOP) para que no se corrompa el Timer. Esto lanza una alerta\r\n          si se intenta ir al Break sin haberlo pausado.\r\n      STOPPED = 2\r\n          Cuando se pulsa STOP y se pausa el Timer, se pasa a este estado 2 donde se muestran\r\n          los botones de RESUME, RESET y Go to Break como el anterior, pero ahora si permite\r\n          cambiar a Break Time.\r\n\r\n      BREAK = 3 (ELIMINADO)\r\n          Si pulsamos Go to Break, pasamos al estado 3 y nos aparece el botón SET BREAK, este\r\n          setea el contador en el tiempo de descanso predeterminado (esto hay que cambiarlo cuando\r\n          el tiempo sea configurable). (ELIMINADO)\r\n\r\n      BACK TO STUDY = 6\r\n          Al setear el timer en Break, nos aparece el START y el BACK TO STUDY. Si iniciamos\r\n          arranca el Timer, si clickeamos BACK TO STUDY nos lleva al inicio del Timer.\r\n      STOP y BACK TO STUDY = 7\r\n          Al arrancar el timer, nos aparece los botones para detenerlo (STOP) y para volver\r\n          al inicio (BACK TO STUDY), este último solo se acciona cuando esta en STOP el Timer.\r\n      STOP y BACK TO STUDY = 8\r\n          Al parar el timer (STOP) en el Break Time, podemos seguir con el tiempo (RESUME) o\r\n          podemos volver al inicio con el BACK TO STUDY, que al estar STOP el timer, te lo permite.\r\n      CONFIG STUDY = 5\r\n          Si clickeamos el engranaje de configuración, nos aparecen los botones para sumar 5 minutos (+),\r\n          substraer 5 minutos (-) y guardar y volver con ese valor modificado (SAVE).\r\n      BACK TO STUDY FINAL = 4\r\n            Cuando termina el break, aparece el botón BACK TO STUDY para volver al inicio\r\n      CONFIG BREAK = 9\r\n            Cuando clickeamos el engranaje para configurar el Study Time y guardamos (SAVE), nos lleva a la\r\n            pantalla de configuración del Break Time con los mismos botones pero referenciado a las variables\r\n            correspondientes a Break.\r\n      */\r\n\r\n  \r\n    var updateStudyMin = minutes,\r\n        updateStudySecs = seconds;\r\n  \r\n    const start = () => {\r\n      if(minutes === 0 && seconds === 0){\r\n       swal({\r\n          title: '¡Cuidado!',\r\n          text: 'Debe configurar el Timer antes de comenzar.',\r\n          icon: 'warning',\r\n          className: 'swal-css',\r\n          button: 'Ok',\r\n          closeOnClickOutside: false\r\n        })\r\n      } else {\r\n        run();\r\n        setStatus(1);\r\n        setInterv(setInterval(run, 1000));\r\n      }\r\n    }\r\n        \r\n    const run = () => {\r\n      if(updateStudySecs === 0){\r\n        if(updateStudyMin !== 0){\r\n          updateStudySecs = 59;\r\n          updateStudyMin--;\r\n        } else{\r\n          setStatus(3);\r\n        }\r\n        \r\n      } else {\r\n        updateStudySecs--;\r\n      }\r\n      setMinutes(updateStudyMin);\r\n      setSeconds(updateStudySecs);\r\n    }\r\n  \r\n    const stop = () => {\r\n      clearInterval(interv);\r\n      setStatus(2);\r\n    }\r\n  \r\n    const reset = () => {\r\n      if(status === 2 || status === 1){\r\n        stop();\r\n        swal({\r\n          title: '¡Cuidado!',\r\n          text: 'Esta acción reiniciará los valores y volverá al inicio.',\r\n          icon: 'warning',\r\n          buttons: ['Seguir aquí', 'Si']\r\n        }).then((resultado) => {\r\n          if (resultado){\r\n            clearInterval(interv);\r\n            setStatus(0);\r\n            setMinutes(initialMinutes);\r\n            setSeconds(initialSeconds);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(welcomeMsg);\r\n          }\r\n        })\r\n      } else {\r\n        clearInterval(interv);\r\n        setStatus(0);\r\n        setMinutes(initialMinutes);\r\n        setSeconds(initialSeconds);\r\n        setBreakMinutes(breakMinutes);\r\n        setBreakSeconds(breakSeconds);\r\n        setMsg(welcomeMsg);\r\n      }\r\n    }\r\n  \r\n    const resume = () => start();\r\n  \r\n    //      ----------------------------------------- BREAK FUNCTIONALITY´S -----------------------------------------\r\n\r\n    var updateBreakMin = breakMin,\r\n        updateBreakSecs = breakSec;\r\n\r\n    const runBreak = () => {\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        } else{\r\n          setStatus(4);\r\n        }\r\n        \r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n  \r\n    const breakRun = () =>{\r\n      setInterv(setInterval(runBreak, 1000));\r\n      setStatus(7);\r\n      if(updateBreakSecs === 0){\r\n        if(updateBreakMin !== 0){\r\n          updateBreakSecs = 59;\r\n          updateBreakMin--;\r\n        }\r\n      } else {\r\n        updateBreakSecs--;\r\n      }\r\n      setBreakMinutes(updateBreakMin);\r\n      setBreakSeconds(updateBreakSecs);\r\n    }\r\n\r\n    const stopBreak = () => {\r\n      clearInterval(interv);\r\n      setStatus(8);\r\n    }\r\n\r\n    const resumeBreak = () => {\r\n      run();\r\n      setStatus(7);\r\n      setInterv(setInterval(runBreak, 1000));\r\n    }\r\n  \r\n    const goToBreak = () => {\r\n      if(status !== 2){\r\n        swal({\r\n          text: 'Debe parar el timer para realizar esta acción.',\r\n          icon: 'warning',\r\n          button: 'Ok'\r\n        })\r\n      }else{\r\n        setMsg(breakMsg);\r\n        setMinutes(initialMinutes);\r\n        setSeconds(initialSeconds);\r\n        setStatus(6);\r\n      }\r\n  \r\n    }\r\n    //      ----------------------------------------- CONFIG BREAK TIMER -----------------------------------------  \r\n\r\n    const configBreakTimer = () => {\r\n      if(status === 9){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addBreak = () => {\r\n      if(breakMin >= 0 && breakMin < 60){\r\n        setBreakMinutes(breakMin + 5);\r\n      } else {\r\n        swal({\r\n          title: 'Límite de tiempo de ciclo alcanzado.',\r\n          text: 'El tiempo máximo para un ciclo de descanso es de 60 minutos.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subBreak = () => {\r\n      if(breakMin > 0){\r\n        setBreakMinutes(breakMin - 5);\r\n      } else {\r\n        swal({\r\n          title: '¡Cuidado!',\r\n          text: 'No puede configurar tiempos negativos para el ciclo de descanso.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n    }\r\n\r\n    const backFromConfig = () => {\r\n      if(breakMin === 0){\r\n        swal({\r\n          text: 'Debe configurar el tiempo para el ciclo de descanso.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      } else {\r\n        setMsg(studyMsg);\r\n        setStatus(0);\r\n        swal({\r\n          text: 'Su ciclo de descanso fue configurado en: ' + breakMin + ' minutos.',\r\n          icon: 'success',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n\r\n    //      ----------------------------------------- CONFIG STUDY TIMER -----------------------------------------  \r\n  \r\n    const backToStudy = () => {\r\n      if (status === 7){\r\n        swal({\r\n          text: 'Debe parar el timer para realizar esta acción.',\r\n          icon: 'warning',\r\n          button: 'Ok'\r\n        })\r\n      }else {\r\n        swal({\r\n          title: '¿Seguro de continuar?',\r\n          text: 'Volverá al inicio',\r\n          icon: 'info',\r\n          buttons: ['Seguir aquí', 'Si']\r\n        }).then((respuesta) =>{\r\n          if(respuesta){\r\n            clearInterval(interv);\r\n            setBreakMinutes(breakMinutes);\r\n            setBreakSeconds(breakSeconds);\r\n            setMsg(studyMsg);\r\n            reset();\r\n          }\r\n        })\r\n      }\r\n  \r\n    }\r\n\r\n    const goToConfigBreak = () => {\r\n      if(minutes === 0){\r\n        swal({\r\n          text: 'Debe configurar el tiempo para el ciclo de estudio.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      } else {\r\n        setMsg(configBreakMsg);\r\n        setStatus(9);\r\n        swal({\r\n          text: 'Su ciclo de estudio fue configurado en: ' + minutes + ' minutos.',\r\n          icon: 'success',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n    }\r\n  \r\n    const configTimer = () => {\r\n      setStatus(5);\r\n      setMsg(configMsg);\r\n      if(status === 5){\r\n        setStatus(0);\r\n      }\r\n    }\r\n  \r\n    const addTimer = () => {\r\n      if(minutes >= 0 && minutes < 60){\r\n        setMinutes(minutes + 5);\r\n      } else {\r\n        swal({\r\n          title: 'Límite de tiempo de ciclo alcanzado.',\r\n          text: 'El tiempo máximo para un ciclo de estudio es 60 minutos.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n  \r\n    }\r\n  \r\n    const subTimer = () => {\r\n      if(minutes > 0){\r\n        setMinutes(minutes - 5);\r\n      } else {\r\n        swal({\r\n          title: '¡Cuidado!',\r\n          text: 'No puede configurar tiempos negativos para el ciclo de estudio.',\r\n          icon: 'error',\r\n          button: 'Ok'\r\n        })\r\n      }\r\n    }\r\n    \r\n  return (\r\n        <div className='TimerFunctionality'>\r\n          <Message msg={msg}/>\r\n          <TimerView minutes={minutes} seconds={seconds} breakMin={breakMin} breakSec={breakSec} status={status}/>\r\n          <Buttons status={status} stop={stop} reset={reset} resume={resume} start={start} \r\n                  breakRun={breakRun} goToBreak={goToBreak} backToStudy={backToStudy} \r\n                  configTimer={configTimer} addTimer={addTimer} subTimer={subTimer} goToConfigBreak={goToConfigBreak}\r\n                  stopBreak={stopBreak} resumeBreak={resumeBreak} configBreakTimer={configBreakTimer}\r\n                  addBreak= {addBreak} subBreak={subBreak} backFromConfig={backFromConfig}/>\r\n\r\n        </div>\r\n  )\r\n\r\n}\r\n\r\nexport default TimerFunctionality"],"mappings":"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"},"metadata":{},"sourceType":"module"}