{"ast":null,"code":"import Swal from \"sweetalert2\";\n\nconst configAlert = () => {\n  Swal.fire({\n    title: \"Timer Configuration\",\n    html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n    confirmButtonText: \"Confirm\",\n    allowOutsideClick: false,\n    allowEscapeKey: false,\n    focusConfirm: false,\n    preConfirm: () => {\n      const configStudyTime = Swal.getPopup().querySelector(\"#study-time\").value;\n      const configShortBreak = Swal.getPopup().querySelector(\"#short-break\").value;\n      const configLongBreak = Swal.getPopup().querySelector(\"#long-break\").value;\n\n      if (!configStudyTime || !configShortBreak || !configLongBreak) {\n        Swal.showValidationMessage(`Please configure the timer`);\n      }\n\n      return {\n        configStudyTime: configStudyTime,\n        configShortBreak: configShortBreak,\n        configLongBreak: configLongBreak\n      };\n    }\n  }).then(result => {\n    Swal.fire({\n      confirmButtonText: \"Ok\",\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      focusConfirm: false,\n      title: `Study Time: ${result.value.configStudyTime} minutes\n            Short Break Time: ${result.value.configShortBreak} minutes\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim()\n    });\n    return {\n      obj: {\n        studyTime: result.value.configStudyTime,\n        shortBreak: result.value.configShortBreak,\n        longBreak: result.value.configLongBreak\n      }\n    };\n  });\n};\n\nexport default configAlert;","map":{"version":3,"names":["Swal","configAlert","fire","title","html","confirmButtonText","allowOutsideClick","allowEscapeKey","focusConfirm","preConfirm","configStudyTime","getPopup","querySelector","value","configShortBreak","configLongBreak","showValidationMessage","then","result","trim","obj","studyTime","shortBreak","longBreak"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/ConfigAlert.js"],"sourcesContent":["import Swal from \"sweetalert2\";\r\n\r\nconst configAlert = () =>{\r\n    Swal.fire({\r\n        title: \"Timer Configuration\",\r\n        html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n        confirmButtonText: \"Confirm\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n        focusConfirm: false,\r\n        preConfirm: () => {\r\n          const configStudyTime =\r\n            Swal.getPopup().querySelector(\"#study-time\").value;\r\n          const configShortBreak =\r\n            Swal.getPopup().querySelector(\"#short-break\").value;\r\n          const configLongBreak =\r\n            Swal.getPopup().querySelector(\"#long-break\").value;\r\n          if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n            Swal.showValidationMessage(`Please configure the timer`);\r\n          }\r\n          return {\r\n            configStudyTime: configStudyTime,\r\n            configShortBreak: configShortBreak,\r\n            configLongBreak: configLongBreak,\r\n          };\r\n        },\r\n      }).then((result) => {\r\n        Swal.fire({\r\n          confirmButtonText: \"Ok\",\r\n          allowOutsideClick: false,\r\n          allowEscapeKey: false,\r\n          focusConfirm: false,\r\n          title: `Study Time: ${result.value.configStudyTime} minutes\r\n            Short Break Time: ${result.value.configShortBreak} minutes\r\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n        });\r\n        return {\r\n            obj: {\r\n                studyTime: result.value.configStudyTime,\r\n            shortBreak: result.value.configShortBreak,\r\n            longBreak: result.value.configLongBreak\r\n        }\r\n        }\r\n    });\r\n}\r\nexport default configAlert;\r\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;;AAEA,MAAMC,WAAW,GAAG,MAAK;EACrBD,IAAI,CAACE,IAAL,CAAU;IACNC,KAAK,EAAE,qBADD;IAENC,IAAI,EAAG;AACf;AACA,+GAJc;IAKNC,iBAAiB,EAAE,SALb;IAMNC,iBAAiB,EAAE,KANb;IAONC,cAAc,EAAE,KAPV;IAQNC,YAAY,EAAE,KARR;IASNC,UAAU,EAAE,MAAM;MAChB,MAAMC,eAAe,GACnBV,IAAI,CAACW,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;MAEA,MAAMC,gBAAgB,GACpBd,IAAI,CAACW,QAAL,GAAgBC,aAAhB,CAA8B,cAA9B,EAA8CC,KADhD;MAEA,MAAME,eAAe,GACnBf,IAAI,CAACW,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;;MAEA,IAAI,CAACH,eAAD,IAAoB,CAACI,gBAArB,IAAyC,CAACC,eAA9C,EAA+D;QAC7Df,IAAI,CAACgB,qBAAL,CAA4B,4BAA5B;MACD;;MACD,OAAO;QACLN,eAAe,EAAEA,eADZ;QAELI,gBAAgB,EAAEA,gBAFb;QAGLC,eAAe,EAAEA;MAHZ,CAAP;IAKD;EAxBK,CAAV,EAyBKE,IAzBL,CAyBWC,MAAD,IAAY;IAClBlB,IAAI,CAACE,IAAL,CAAU;MACRG,iBAAiB,EAAE,IADX;MAERC,iBAAiB,EAAE,KAFX;MAGRC,cAAc,EAAE,KAHR;MAIRC,YAAY,EAAE,KAJN;MAKRL,KAAK,EAAG,eAAce,MAAM,CAACL,KAAP,CAAaH,eAAgB;AAC7D,gCAAgCQ,MAAM,CAACL,KAAP,CAAaC,gBAAiB;AAC9D,+BAA+BI,MAAM,CAACL,KAAP,CAAaE,eAAgB,UAF3C,CAEqDI,IAFrD;IALC,CAAV;IASA,OAAO;MACHC,GAAG,EAAE;QACDC,SAAS,EAAEH,MAAM,CAACL,KAAP,CAAaH,eADvB;QAELY,UAAU,EAAEJ,MAAM,CAACL,KAAP,CAAaC,gBAFpB;QAGLS,SAAS,EAAEL,MAAM,CAACL,KAAP,CAAaE;MAHnB;IADF,CAAP;EAOH,CA1CD;AA2CH,CA5CD;;AA6CA,eAAed,WAAf"},"metadata":{},"sourceType":"module"}