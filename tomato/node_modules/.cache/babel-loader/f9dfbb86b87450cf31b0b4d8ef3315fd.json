{"ast":null,"code":"import Swal from \"sweetalert2\";\nlet studyTime;\nlet shortBreak;\nlet longBreak;\n\nconst setTimes = () => {\n  // studyTime = prompt('Ingresa tiempo')\n  // shortBreak = prompt('Ingresa tiempo')\n  // longBreak = prompt('Ingresa tiempo')\n  Swal.fire({\n    title: \"Timer Configuration\",\n    html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n    confirmButtonText: \"Confirm\",\n    allowOutsideClick: false,\n    allowEscapeKey: false,\n    focusConfirm: false,\n    preConfirm: () => {\n      const configStudyTime = Swal.getPopup().querySelector(\"#study-time\").value;\n      const configShortBreak = Swal.getPopup().querySelector(\"#short-break\").value;\n      const configLongBreak = Swal.getPopup().querySelector(\"#long-break\").value;\n\n      if (!configStudyTime || !configShortBreak || !configLongBreak) {\n        Swal.showValidationMessage(`Please configure the timer`);\n      }\n\n      return {\n        configStudyTime: configStudyTime,\n        configShortBreak: configShortBreak,\n        configLongBreak: configLongBreak\n      };\n    }\n  }).then(result => {\n    Swal.fire({\n      confirmButtonText: \"Ok\",\n      allowOutsideClick: false,\n      allowEscapeKey: false,\n      focusConfirm: false,\n      title: `Study Time: ${result.value.configStudyTime} minutes\n            Short Break Time: ${result.value.configShortBreak} minutes\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim()\n    });\n    return {\n      studyTime: result.value.configStudyTime,\n      shortBreak: result.value.configShortBreak,\n      longBreak: result.value.configLongBreak\n    };\n  });\n};\n\nconst configAlert = () => {\n  return new Promise(resolve => {\n    resolve(setTimes());\n  });\n}; //     Swal.fire({\n//         title: \"Timer Configuration\",\n//         html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\n//        <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\n//        <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\n//         confirmButtonText: \"Confirm\",\n//         allowOutsideClick: false,\n//         allowEscapeKey: false,\n//         focusConfirm: false,\n//         preConfirm: () => {\n//           const configStudyTime =\n//             Swal.getPopup().querySelector(\"#study-time\").value;\n//           const configShortBreak =\n//             Swal.getPopup().querySelector(\"#short-break\").value;\n//           const configLongBreak =\n//             Swal.getPopup().querySelector(\"#long-break\").value;\n//           if (!configStudyTime || !configShortBreak || !configLongBreak) {\n//             Swal.showValidationMessage(`Please configure the timer`);\n//           }\n//           return {\n//             configStudyTime: configStudyTime,\n//             configShortBreak: configShortBreak,\n//             configLongBreak: configLongBreak,\n//           };\n//         },\n//       }).then((result) => {\n//         Swal.fire({\n//           confirmButtonText: \"Ok\",\n//           allowOutsideClick: false,\n//           allowEscapeKey: false,\n//           focusConfirm: false,\n//           title: `Study Time: ${result.value.configStudyTime} minutes\n//             Short Break Time: ${result.value.configShortBreak} minutes\n//             Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\n//         });\n//         return {\n//             studyTime: result.value.configStudyTime,\n//             shortBreak: result.value.configShortBreak,\n//             longBreak: result.value.configLongBreak\n//         }\n//     });\n// }\n\n\nasync function asynCall() {\n  console.log('entrando');\n  const obj = await configAlert();\n  console.log(studyTime + \" \" + shortBreak + \" \" + longBreak);\n}\n\nexport { configAlert, asynCall };","map":{"version":3,"names":["Swal","studyTime","shortBreak","longBreak","setTimes","fire","title","html","confirmButtonText","allowOutsideClick","allowEscapeKey","focusConfirm","preConfirm","configStudyTime","getPopup","querySelector","value","configShortBreak","configLongBreak","showValidationMessage","then","result","trim","configAlert","Promise","resolve","asynCall","console","log","obj"],"sources":["C:/Users/Bruno/github/poss/tomato/src/components/Timer/ConfigAlert.js"],"sourcesContent":["import Swal from \"sweetalert2\";\r\n\r\nlet studyTime;\r\nlet shortBreak;\r\nlet longBreak;\r\n\r\nconst setTimes = () =>{\r\n    // studyTime = prompt('Ingresa tiempo')\r\n    // shortBreak = prompt('Ingresa tiempo')\r\n    // longBreak = prompt('Ingresa tiempo')\r\n    \r\n        Swal.fire({\r\n        title: \"Timer Configuration\",\r\n        html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n       <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n       <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n        confirmButtonText: \"Confirm\",\r\n        allowOutsideClick: false,\r\n        allowEscapeKey: false,\r\n        focusConfirm: false,\r\n        preConfirm: () => {\r\n          const configStudyTime =\r\n            Swal.getPopup().querySelector(\"#study-time\").value;\r\n          const configShortBreak =\r\n            Swal.getPopup().querySelector(\"#short-break\").value;\r\n          const configLongBreak =\r\n            Swal.getPopup().querySelector(\"#long-break\").value;\r\n          if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n            Swal.showValidationMessage(`Please configure the timer`);\r\n          }\r\n          return {\r\n            configStudyTime: configStudyTime,\r\n            configShortBreak: configShortBreak,\r\n            configLongBreak: configLongBreak,\r\n          };\r\n        },\r\n      }).then((result) => {\r\n        Swal.fire({\r\n          confirmButtonText: \"Ok\",\r\n          allowOutsideClick: false,\r\n          allowEscapeKey: false,\r\n          focusConfirm: false,\r\n          title: `Study Time: ${result.value.configStudyTime} minutes\r\n            Short Break Time: ${result.value.configShortBreak} minutes\r\n            Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n        });\r\n        return {\r\n            studyTime: result.value.configStudyTime,\r\n            shortBreak: result.value.configShortBreak,\r\n            longBreak: result.value.configLongBreak\r\n        }\r\n    });\r\n    }\r\n\r\nconst configAlert = () =>{\r\n    return new Promise(resolve =>{\r\n            resolve(setTimes());\r\n    });\r\n}\r\n//     Swal.fire({\r\n//         title: \"Timer Configuration\",\r\n//         html: `<input type=\"number\" id=\"study-time\" class=\"study-time\" min=\"0\" max=\"60\" placeholder=\"Study Time\"><br>\r\n//        <input type=\"number\" id=\"short-break\" class=\"short-break\" min=\"0\" max=\"60\" placeholder=\"Short Break Time\"><br>\r\n//        <input type=\"number\" id=\"long-break\" class=\"long-break\" min=\"0\" max=\"60\" placeholder=\"Long Break Time\">`,\r\n//         confirmButtonText: \"Confirm\",\r\n//         allowOutsideClick: false,\r\n//         allowEscapeKey: false,\r\n//         focusConfirm: false,\r\n//         preConfirm: () => {\r\n//           const configStudyTime =\r\n//             Swal.getPopup().querySelector(\"#study-time\").value;\r\n//           const configShortBreak =\r\n//             Swal.getPopup().querySelector(\"#short-break\").value;\r\n//           const configLongBreak =\r\n//             Swal.getPopup().querySelector(\"#long-break\").value;\r\n//           if (!configStudyTime || !configShortBreak || !configLongBreak) {\r\n//             Swal.showValidationMessage(`Please configure the timer`);\r\n//           }\r\n//           return {\r\n//             configStudyTime: configStudyTime,\r\n//             configShortBreak: configShortBreak,\r\n//             configLongBreak: configLongBreak,\r\n//           };\r\n//         },\r\n//       }).then((result) => {\r\n//         Swal.fire({\r\n//           confirmButtonText: \"Ok\",\r\n//           allowOutsideClick: false,\r\n//           allowEscapeKey: false,\r\n//           focusConfirm: false,\r\n//           title: `Study Time: ${result.value.configStudyTime} minutes\r\n//             Short Break Time: ${result.value.configShortBreak} minutes\r\n//             Long Break Time: ${result.value.configLongBreak} minutes`.trim(),\r\n//         });\r\n//         return {\r\n//             studyTime: result.value.configStudyTime,\r\n//             shortBreak: result.value.configShortBreak,\r\n//             longBreak: result.value.configLongBreak\r\n//         }\r\n//     });\r\n// }\r\n\r\nasync function asynCall(){\r\n    console.log('entrando');\r\n    const obj = await configAlert();\r\n    console.log(studyTime + \" \" + shortBreak + \" \" + longBreak)\r\n}\r\n\r\n\r\nexport {configAlert,asynCall};\r\n"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,IAAIC,SAAJ;AACA,IAAIC,UAAJ;AACA,IAAIC,SAAJ;;AAEA,MAAMC,QAAQ,GAAG,MAAK;EAClB;EACA;EACA;EAEIJ,IAAI,CAACK,IAAL,CAAU;IACVC,KAAK,EAAE,qBADG;IAEVC,IAAI,EAAG;AACf;AACA,+GAJkB;IAKVC,iBAAiB,EAAE,SALT;IAMVC,iBAAiB,EAAE,KANT;IAOVC,cAAc,EAAE,KAPN;IAQVC,YAAY,EAAE,KARJ;IASVC,UAAU,EAAE,MAAM;MAChB,MAAMC,eAAe,GACnBb,IAAI,CAACc,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;MAEA,MAAMC,gBAAgB,GACpBjB,IAAI,CAACc,QAAL,GAAgBC,aAAhB,CAA8B,cAA9B,EAA8CC,KADhD;MAEA,MAAME,eAAe,GACnBlB,IAAI,CAACc,QAAL,GAAgBC,aAAhB,CAA8B,aAA9B,EAA6CC,KAD/C;;MAEA,IAAI,CAACH,eAAD,IAAoB,CAACI,gBAArB,IAAyC,CAACC,eAA9C,EAA+D;QAC7DlB,IAAI,CAACmB,qBAAL,CAA4B,4BAA5B;MACD;;MACD,OAAO;QACLN,eAAe,EAAEA,eADZ;QAELI,gBAAgB,EAAEA,gBAFb;QAGLC,eAAe,EAAEA;MAHZ,CAAP;IAKD;EAxBS,CAAV,EAyBCE,IAzBD,CAyBOC,MAAD,IAAY;IAClBrB,IAAI,CAACK,IAAL,CAAU;MACRG,iBAAiB,EAAE,IADX;MAERC,iBAAiB,EAAE,KAFX;MAGRC,cAAc,EAAE,KAHR;MAIRC,YAAY,EAAE,KAJN;MAKRL,KAAK,EAAG,eAAce,MAAM,CAACL,KAAP,CAAaH,eAAgB;AAC7D,gCAAgCQ,MAAM,CAACL,KAAP,CAAaC,gBAAiB;AAC9D,+BAA+BI,MAAM,CAACL,KAAP,CAAaE,eAAgB,UAF3C,CAEqDI,IAFrD;IALC,CAAV;IASA,OAAO;MACHrB,SAAS,EAAEoB,MAAM,CAACL,KAAP,CAAaH,eADrB;MAEHX,UAAU,EAAEmB,MAAM,CAACL,KAAP,CAAaC,gBAFtB;MAGHd,SAAS,EAAEkB,MAAM,CAACL,KAAP,CAAaE;IAHrB,CAAP;EAKH,CAxCG;AAyCH,CA9CL;;AAgDA,MAAMK,WAAW,GAAG,MAAK;EACrB,OAAO,IAAIC,OAAJ,CAAYC,OAAO,IAAG;IACrBA,OAAO,CAACrB,QAAQ,EAAT,CAAP;EACP,CAFM,CAAP;AAGH,CAJD,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAesB,QAAf,GAAyB;EACrBC,OAAO,CAACC,GAAR,CAAY,UAAZ;EACA,MAAMC,GAAG,GAAG,MAAMN,WAAW,EAA7B;EACAI,OAAO,CAACC,GAAR,CAAY3B,SAAS,GAAG,GAAZ,GAAkBC,UAAlB,GAA+B,GAA/B,GAAqCC,SAAjD;AACH;;AAGD,SAAQoB,WAAR,EAAoBG,QAApB"},"metadata":{},"sourceType":"module"}